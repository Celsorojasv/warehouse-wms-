--Bitacoras


--BRANCH
CREATE TABLE BITACORA_BRANCH (
    ID_USER      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_BRANCH       INTEGER NOT NULL,
    NAME_BRANCH     VARCHAR2(120) ,
    ADDRESS_BRANCH  VARCHAR2(220) ,
    PHONE_BRANCH    VARCHAR2(15),
    DATE_TIME    DATE NOT NULL
);

CREATE OR REPLACE TRIGGER B_BRANCH AFTER INSERT OR UPDATE OR DELETE ON BRANCH FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_BRANCH_CREATE(:new.ID_BRANCH,:new.NAME_BRANCH,:new.ADDRESS_BRANCH,:new.PHONE_BRANCH);
    ELSIF DELETING  THEN
    B_BRANCH_DELETE(:old.ID_BRANCH,:old.NAME_BRANCH,:old.ADDRESS_BRANCH,:old.PHONE_BRANCH);
    ELSIF UPDATING THEN
    B_BRANCH_UPDATE(:old.ID_BRANCH,:old.NAME_BRANCH,:old.ADDRESS_BRANCH,:old.PHONE_BRANCH);
    END IF;
END;

--INSERTING BRANCH
CREATE OR REPLACE PROCEDURE B_BRANCH_CREATE (PID_BRANCH IN BITACORA_BRANCH.ID_BRANCH%TYPE, PNAME_BRANCH IN BITACORA_BRANCH.NAME_BRANCH%TYPE,
PADDRESS_BRANCH IN BITACORA_BRANCH.ADDRESS_BRANCH%TYPE,PPHONE_BRANCH IN BITACORA_BRANCH.PHONE_BRANCH%TYPE) AS
BEGIN
  INSERT INTO BITACORA_BRANCH VALUES (USER,'INSERT',PID_BRANCH,PNAME_BRANCH,PADDRESS_BRANCH,PPHONE_BRANCH,SYSDATE);
END;

--DELETING BRANCH
CREATE OR REPLACE PROCEDURE B_BRANCH_DELETE (PID_BRANCH IN BITACORA_BRANCH.ID_BRANCH%TYPE, PNAME_BRANCH IN BITACORA_BRANCH.NAME_BRANCH%TYPE,
PADDRESS_BRANCH IN BITACORA_BRANCH.ADDRESS_BRANCH%TYPE,PPHONE_BRANCH IN BITACORA_BRANCH.PHONE_BRANCH%TYPE) AS
BEGIN
  INSERT INTO BITACORA_BRANCH VALUES (USER,'DELETE',PID_BRANCH,PNAME_BRANCH,PADDRESS_BRANCH,PPHONE_BRANCH,SYSDATE);
END;

--UPDATING BRANCH
CREATE OR REPLACE PROCEDURE B_BRANCH_UPDATE (PID_BRANCH IN BITACORA_BRANCH.ID_BRANCH%TYPE, PNAME_BRANCH IN BITACORA_BRANCH.NAME_BRANCH%TYPE,
PADDRESS_BRANCH IN BITACORA_BRANCH.ADDRESS_BRANCH%TYPE,PPHONE_BRANCH IN BITACORA_BRANCH.PHONE_BRANCH%TYPE) AS
BEGIN
  INSERT INTO BITACORA_BRANCH VALUES (USER,'UPDATING',PID_BRANCH,PNAME_BRANCH,PADDRESS_BRANCH,PPHONE_BRANCH,SYSDATE);
END;

SELECT * FROM BITACORA_BRANCH;
SELECT * FROM BRANCH;

--CATEGORY

CREATE TABLE BITACORA_CATEGORY (
    ID_USER      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_CATEGORY  INTEGER NOT NULL,
    NAME         VARCHAR2(50),
    DESCRIPTION  VARCHAR2(100),
    DATE_TIME    DATE NOT NULL
);

CREATE OR REPLACE TRIGGER B_CATEGORY AFTER INSERT OR UPDATE OR DELETE ON CATEGORY FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_CATEGORY_CREATE(:new.ID_CATEGORY,:new.NAME,:new.DESCRIPTION);
    ELSIF DELETING  THEN
    B_CATEGORY_DELETE(:old.ID_CATEGORY, :old.NAME,:old.DESCRIPTION);
    ELSIF UPDATING THEN
    B_CATEGORY_UPDATE(:old.ID_CATEGORY, :old.NAME,:old.DESCRIPTION);
    END IF;
END;

--INSERTING CATEGORY
CREATE OR REPLACE PROCEDURE B_CATEGORY_CREATE (PID_CATEGORY IN BITACORA_CATEGORY.ID_CATEGORY%TYPE, PNAME_CATEGORY IN BITACORA_CATEGORY.NAME%TYPE,
PDESCRIPTION_CATEGORY IN BITACORA_CATEGORY.DESCRIPTION%TYPE) AS
BEGIN
  INSERT INTO BITACORA_CATEGORY VALUES (USER,'INSERT',PID_CATEGORY,PNAME_CATEGORY,PDESCRIPTION_CATEGORY,SYSDATE);
END;

CREATE OR REPLACE PROCEDURE B_CATEGORY_DELETE (PID_CATEGORY IN BITACORA_CATEGORY.ID_CATEGORY%TYPE, PNAME_CATEGORY IN BITACORA_CATEGORY.NAME%TYPE,
PDESCRIPTION_CATEGORY IN BITACORA_CATEGORY.DESCRIPTION%TYPE) AS
BEGIN
  INSERT INTO BITACORA_CATEGORY VALUES (USER,'DELETE',PID_CATEGORY,PNAME_CATEGORY,PDESCRIPTION_CATEGORY,SYSDATE);
END;

CREATE OR REPLACE PROCEDURE B_CATEGORY_UPDATE (PID_CATEGORY IN BITACORA_CATEGORY.ID_CATEGORY%TYPE, PNAME_CATEGORY IN BITACORA_CATEGORY.NAME%TYPE,
PDESCRIPTION_CATEGORY IN BITACORA_CATEGORY.DESCRIPTION%TYPE) AS
BEGIN
  INSERT INTO BITACORA_CATEGORY VALUES (USER,'UPDATE',PID_CATEGORY,PNAME_CATEGORY,PDESCRIPTION_CATEGORY,SYSDATE);
END;

SELECT * FROM BITACORA_CATEGORY;
SELECT * FROM CATEGORY;

--N_ORDER
CREATE TABLE BITACORA_N_ORDER (
    ID_USER      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_ORDER      INTEGER NOT NULL,
    DATE_TIME     DATE NOT NULL,
    TOTAL_AMOUNT  NUMBER(10, 2) NOT NULL,
    DATE_TIME_B    DATE NOT NULL
);

CREATE OR REPLACE TRIGGER B_N_ORDER AFTER INSERT OR UPDATE OR DELETE ON N_ORDER FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_N_ORDER_CREATE(:new.ID_ORDER,:new.DATE_TIME,:new.TOTAL_AMOUNT);
    ELSIF DELETING  THEN
    B_N_ORDER_DELETE(:old.ID_ORDER,:old.DATE_TIME,:old.TOTAL_AMOUNT);
    ELSIF UPDATING THEN
    B_N_ORDER_UPDATE(:old.ID_ORDER,:old.DATE_TIME,:old.TOTAL_AMOUNT);
    END IF;
END;

--INSERTING N_ORDER
CREATE OR REPLACE PROCEDURE B_N_ORDER_CREATE (PID_ORDER IN BITACORA_N_ORDER.ID_ORDER%TYPE, PDATE_TIME IN BITACORA_N_ORDER.DATE_TIME%TYPE,
PTOTAL_AMOUNT IN BITACORA_N_ORDER.TOTAL_AMOUNT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_N_ORDER VALUES (USER,'INSERT',PID_ORDER,PDATE_TIME,PTOTAL_AMOUNT,SYSDATE);
END;

--DELETING N_ORDER
CREATE OR REPLACE PROCEDURE B_N_ORDER_DELETE (PID_ORDER IN BITACORA_N_ORDER.ID_ORDER%TYPE, PDATE_TIME IN BITACORA_N_ORDER.DATE_TIME%TYPE,
PTOTAL_AMOUNT IN BITACORA_N_ORDER.TOTAL_AMOUNT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_N_ORDER VALUES (USER,'DELETE',PID_ORDER,PDATE_TIME,PTOTAL_AMOUNT,SYSDATE);
END;

--UPDATING N_ORDER
CREATE OR REPLACE PROCEDURE B_N_ORDER_UPDATE (PID_ORDER IN BITACORA_N_ORDER.ID_ORDER%TYPE, PDATE_TIME IN BITACORA_N_ORDER.DATE_TIME%TYPE,
PTOTAL_AMOUNT IN BITACORA_N_ORDER.TOTAL_AMOUNT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_N_ORDER VALUES (USER,'UPDATING',PID_ORDER,PDATE_TIME,PTOTAL_AMOUNT,SYSDATE);
END;

SELECT * FROM BITACORA_N_ORDER;
SELECT * FROM N_ORDER;


--PRODUCT 
CREATE TABLE BITACORA_PRODUCT (
    ID_USER      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_PRODUCT       INTEGER NOT NULL,
    NAME_PRODUCT     VARCHAR2(120) NOT NULL,
    CREATED_PRODUCT  DATE NOT NULL,
    ID_CATEGORY INTEGER NOT NULL,
    DATE_TIME   DATE NOT NULL
);

CREATE OR REPLACE TRIGGER B_PRODUCT AFTER INSERT OR UPDATE OR DELETE ON PRODUCT FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_PRODUCT_CREATE(:new.ID_PRODUCT,:new.NAME_PRODUCT,:new.CREATED_PRODUCT,:new.ID_CATEGORY);
    ELSIF DELETING  THEN
    B_PRODUCT_DELETE(:old.ID_PRODUCT,:old.NAME_PRODUCT,:old.CREATED_PRODUCT,:old.ID_CATEGORY);
    ELSIF UPDATING THEN
    B_PRODUCT_UPDATE(:old.ID_PRODUCT,:old.NAME_PRODUCT,:old.CREATED_PRODUCT,:old.ID_CATEGORY);
    END IF;
END;

--INSERTING PRODUCT
CREATE OR REPLACE PROCEDURE B_PRODUCT_CREATE (PID_PRODUCT IN BITACORA_PRODUCT.ID_PRODUCT%TYPE , PNAME_PRODUCT IN BITACORA_PRODUCT.NAME_PRODUCT%TYPE,
PCREATED_PRODUCT IN BITACORA_PRODUCT.CREATED_PRODUCT%TYPE, PID_CATEGORY IN BITACORA_PRODUCT.ID_CATEGORY%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PRODUCT VALUES (USER,'INSERT',PID_PRODUCT,PNAME_PRODUCT,PCREATED_PRODUCT,PID_CATEGORY,SYSDATE);

END;

--DELETING PRODUCT
CREATE OR REPLACE PROCEDURE B_PRODUCT_DELETE (PID_PRODUCT IN BITACORA_PRODUCT.ID_PRODUCT%TYPE , PNAME_PRODUCT IN BITACORA_PRODUCT.NAME_PRODUCT%TYPE,
PCREATED_PRODUCT IN BITACORA_PRODUCT.CREATED_PRODUCT%TYPE, PID_CATEGORY IN BITACORA_PRODUCT.ID_CATEGORY%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PRODUCT VALUES (USER,'DELETE',PID_PRODUCT,PNAME_PRODUCT,PCREATED_PRODUCT,PID_CATEGORY,SYSDATE);
END;

--UPDATING PRODUCT
CREATE OR REPLACE PROCEDURE B_PRODUCT_UPDATE (PID_PRODUCT IN BITACORA_PRODUCT.ID_PRODUCT%TYPE , PNAME_PRODUCT IN BITACORA_PRODUCT.NAME_PRODUCT%TYPE,
PCREATED_PRODUCT IN BITACORA_PRODUCT.CREATED_PRODUCT%TYPE, PID_CATEGORY IN BITACORA_PRODUCT.ID_CATEGORY%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PRODUCT VALUES (USER,'UPDATE',PID_PRODUCT,PNAME_PRODUCT,PCREATED_PRODUCT,PID_CATEGORY,SYSDATE);
END;

SELECT * FROM BITACORA_PRODUCT;
SELECT * FROM PRODUCT;


---PROVIDER

CREATE TABLE BITACORA_PROVIDER (
    ID_USER      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_PROVIDER       INTEGER NOT NULL,
    NAME_PROVIDER     VARCHAR2(250) NOT NULL,
    NIT_PROVIDER      VARCHAR2(15),
    PHONE_PROVIDER    VARCHAR2(15),
    ADDRESS_PROVIDER  VARCHAR2(220),
    DATE_TIME    DATE NOT NULL
);


CREATE OR REPLACE TRIGGER B_PROVIDER AFTER INSERT OR UPDATE OR DELETE ON PROVIDER FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_PROVIDER_CREATE(:new.ID_PROVIDER,:new.NAME_PROVIDER,:new.NIT_PROVIDER,:new.PHONE_PROVIDER,:new.ADDRESS_PROVIDER);
    ELSIF DELETING  THEN
    B_PROVIDER_DELETE(:old.ID_PROVIDER,:old.NAME_PROVIDER,:old.NIT_PROVIDER,:old.PHONE_PROVIDER,:old.ADDRESS_PROVIDER);
    ELSIF UPDATING THEN
    B_PROVIDER_UPDATE(:old.ID_PROVIDER,:old.NAME_PROVIDER,:old.NIT_PROVIDER,:old.PHONE_PROVIDER,:old.ADDRESS_PROVIDER);
    END IF;
END;


--INSERTING PROVIDER
CREATE OR REPLACE PROCEDURE B_PROVIDER_CREATE (PID_PROVIDER IN BITACORA_PROVIDER.ID_PROVIDER%TYPE, PNAME_PROVIDER IN BITACORA_PROVIDER.NAME_PROVIDER%TYPE,
PNIT_PROVIDER IN BITACORA_PROVIDER.NIT_PROVIDER%TYPE, PPHONE_PROVIDER IN BITACORA_PROVIDER.PHONE_PROVIDER%TYPE, PADDRESS_PROVIDER IN BITACORA_PROVIDER.ADDRESS_PROVIDER%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PROVIDER VALUES (USER,'INSERT',PID_PROVIDER,PNAME_PROVIDER,PNIT_PROVIDER,PPHONE_PROVIDER,PADDRESS_PROVIDER,SYSDATE);
END;

--DELETING PROVIDER
CREATE OR REPLACE PROCEDURE B_PROVIDER_DELETE (PID_PROVIDER IN BITACORA_PROVIDER.ID_PROVIDER%TYPE, PNAME_PROVIDER IN BITACORA_PROVIDER.NAME_PROVIDER%TYPE,
PNIT_PROVIDER IN BITACORA_PROVIDER.NIT_PROVIDER%TYPE, PPHONE_PROVIDER IN BITACORA_PROVIDER.PHONE_PROVIDER%TYPE, PADDRESS_PROVIDER IN BITACORA_PROVIDER.ADDRESS_PROVIDER%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PROVIDER VALUES (USER,'DELETE',PID_PROVIDER,PNAME_PROVIDER,PNIT_PROVIDER,PPHONE_PROVIDER,PADDRESS_PROVIDER,SYSDATE);
END;

--UPDATING PROVIDER
CREATE OR REPLACE PROCEDURE B_PROVIDER_UPDATE (PID_PROVIDER IN BITACORA_PROVIDER.ID_PROVIDER%TYPE, PNAME_PROVIDER IN BITACORA_PROVIDER.NAME_PROVIDER%TYPE,
PNIT_PROVIDER IN BITACORA_PROVIDER.NIT_PROVIDER%TYPE, PPHONE_PROVIDER IN BITACORA_PROVIDER.PHONE_PROVIDER%TYPE, PADDRESS_PROVIDER IN BITACORA_PROVIDER.ADDRESS_PROVIDER%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PROVIDER VALUES (USER,'UPDATING',PID_PROVIDER,PNAME_PROVIDER,PNIT_PROVIDER,PPHONE_PROVIDER,PADDRESS_PROVIDER,SYSDATE);
END;

SELECT * FROM BITACORA_PROVIDER;
SELECT * FROM PROVIDER;

--PROVIDER BY PRODUCT

CREATE TABLE BITACORA_PBP (
    ID_USER_B      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_PROVIDER_BY_PRODUCT  INTEGER NOT NULL,
    LAST_ADDED              DATE NOT NULL,
    ID_PROVIDER             INTEGER NOT NULL,
    ID_PRODUCT              INTEGER NOT NULL,
    ID_USER                 INTEGER NOT NULL,
    QUANTITY                INTEGER NOT NULL,
    PRICE_PRODUCT           FLOAT(10) NOT NULL,
    DATE_TIME    DATE NOT NULL
);

CREATE OR REPLACE TRIGGER B_PBP AFTER INSERT OR UPDATE OR DELETE ON PROVIDER_BY_PRODUCT FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_PBP_CREATE(:new.ID_PROVIDER_BY_PRODUCT, :new.LAST_ADDED, :new.ID_PROVIDER , :new.ID_PRODUCT, :new.ID_USER , :new.QUANTITY , :new.PRICE_PRODUCT);
    ELSIF DELETING  THEN
    B_PBP_DELETE(:old.ID_PROVIDER_BY_PRODUCT, :old.LAST_ADDED, :old.ID_PROVIDER , :old.ID_PRODUCT, :old.ID_USER , :old.QUANTITY , :old.PRICE_PRODUCT);
    ELSIF UPDATING THEN
    B_PBP_UPDATE(:old.ID_PROVIDER_BY_PRODUCT, :old.LAST_ADDED, :old.ID_PROVIDER , :old.ID_PRODUCT, :old.ID_USER , :old.QUANTITY , :old.PRICE_PRODUCT);
    END IF;
END;


--INSERTING PBP
CREATE OR REPLACE PROCEDURE B_PBP_CREATE (
PID_PROVIDER_BY_PRODUCT IN BITACORA_PBP.ID_PROVIDER_BY_PRODUCT%TYPE,
PLAST_ADDED IN BITACORA_PBP.LAST_ADDED%TYPE,
PID_PROVIDER IN BITACORA_PBP.ID_PROVIDER%TYPE,
PID_PRODUCT IN BITACORA_PBP.ID_PRODUCT%TYPE,
PID_USER IN BITACORA_PBP.ID_USER%TYPE,
PQUANTITY IN BITACORA_PBP.QUANTITY%TYPE,
PPRICE_PRODUCT IN BITACORA_PBP.PRICE_PRODUCT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PBP VALUES (USER,'INSERT',PID_PROVIDER_BY_PRODUCT,PLAST_ADDED
  ,PID_PROVIDER,PID_PRODUCT,PID_USER,PQUANTITY,PPRICE_PRODUCT,SYSDATE);
END;

--DELETE PBP
CREATE OR REPLACE PROCEDURE B_PBP_DELETE (
PID_PROVIDER_BY_PRODUCT IN BITACORA_PBP.ID_PROVIDER_BY_PRODUCT%TYPE,
PLAST_ADDED IN BITACORA_PBP.LAST_ADDED%TYPE,
PID_PROVIDER IN BITACORA_PBP.ID_PROVIDER%TYPE,
PID_PRODUCT IN BITACORA_PBP.ID_PRODUCT%TYPE,
PID_USER IN BITACORA_PBP.ID_USER%TYPE,
PQUANTITY IN BITACORA_PBP.QUANTITY%TYPE,
PPRICE_PRODUCT IN BITACORA_PBP.PRICE_PRODUCT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PBP VALUES (USER,'DELETE',PID_PROVIDER_BY_PRODUCT,PLAST_ADDED
  ,PID_PROVIDER,PID_PRODUCT,PID_USER,PQUANTITY,PPRICE_PRODUCT,SYSDATE);
END;

--UPDATE PBP
CREATE OR REPLACE PROCEDURE B_PBP_UPDATE (
PID_PROVIDER_BY_PRODUCT IN BITACORA_PBP.ID_PROVIDER_BY_PRODUCT%TYPE,
PLAST_ADDED IN BITACORA_PBP.LAST_ADDED%TYPE,
PID_PROVIDER IN BITACORA_PBP.ID_PROVIDER%TYPE,
PID_PRODUCT IN BITACORA_PBP.ID_PRODUCT%TYPE,
PID_USER IN BITACORA_PBP.ID_USER%TYPE,
PQUANTITY IN BITACORA_PBP.QUANTITY%TYPE,
PPRICE_PRODUCT IN BITACORA_PBP.PRICE_PRODUCT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PBP VALUES (USER,'UPDATE',PID_PROVIDER_BY_PRODUCT,PLAST_ADDED
  ,PID_PROVIDER,PID_PRODUCT,PID_USER,PQUANTITY,PPRICE_PRODUCT,SYSDATE);
END;

SELECT * FROM BITACORA_PBP;
SELECT * FROM PROVIDER_BY_PRODUCT;

----Order_Detail
CREATE TABLE BITACORA_ORDER_DETAIL (
    ID_USER      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_DETAIL               INTEGER NOT NULL,
    ID_PROVIDER_BY_PRODUCT  INTEGER NOT NULL,
    QUATITY_IN              INTEGER NOT NULL,
    PRICE_BY_PRODUCT        NUMBER(10,2) NOT NULL,
    ID_ORDER                INTEGER NOT NULL,
    DATE_TIME    DATE NOT NULL
);

CREATE OR REPLACE TRIGGER B_ORDER_DETAIL AFTER INSERT OR UPDATE OR DELETE ON ORDER_DETAIL FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_ORDER_DETAIL_CREATE(:new.ID_DETAIL,:new.ID_PROVIDER_BY_PRODUCT,:new.QUATITY_IN,:new.PRICE_BY_PRODUCT,:new.ID_ORDER);
    ELSIF DELETING  THEN
    B_ORDER_DETAIL_DELETE(:old.ID_DETAIL,:old.ID_PROVIDER_BY_PRODUCT,:old.QUATITY_IN,:old.PRICE_BY_PRODUCT,:old.ID_ORDER);
    ELSIF UPDATING THEN
    B_ORDER_DETAIL_UPDATE(:old.ID_DETAIL,:old.ID_PROVIDER_BY_PRODUCT,:old.QUATITY_IN,:old.PRICE_BY_PRODUCT,:old.ID_ORDER);
    END IF;
END;

--INSERTING ORDER_DETAIL
CREATE OR REPLACE PROCEDURE B_ORDER_DETAIL_CREATE (PID_DETAIL IN BITACORA_ORDER_DETAIL.ID_DETAIL%TYPE,
PID_PROVIDER_BY_PRODUCT IN BITACORA_ORDER_DETAIL.ID_PROVIDER_BY_PRODUCT%TYPE,
PQUATITY_IN IN BITACORA_ORDER_DETAIL.QUATITY_IN%TYPE,
PPRICE_BY_PRODUCT IN BITACORA_ORDER_DETAIL.PRICE_BY_PRODUCT%TYPE,
PID_ORDER IN BITACORA_ORDER_DETAIL.ID_ORDER%TYPE) AS
BEGIN
  INSERT INTO BITACORA_ORDER_DETAIL VALUES (USER,'INSERT',PID_DETAIL,PID_PROVIDER_BY_PRODUCT,PQUATITY_IN,PPRICE_BY_PRODUCT,PID_ORDER,SYSDATE);
END;

--DELETING ORDER_DETAIL
CREATE OR REPLACE PROCEDURE B_ORDER_DETAIL_DELETE (PID_DETAIL IN BITACORA_ORDER_DETAIL.ID_DETAIL%TYPE,
PID_PROVIDER_BY_PRODUCT IN BITACORA_ORDER_DETAIL.ID_PROVIDER_BY_PRODUCT%TYPE,
PQUATITY_IN IN BITACORA_ORDER_DETAIL.QUATITY_IN%TYPE,
PPRICE_BY_PRODUCT IN BITACORA_ORDER_DETAIL.PRICE_BY_PRODUCT%TYPE,
PID_ORDER IN BITACORA_ORDER_DETAIL.ID_ORDER%TYPE) AS
BEGIN
  INSERT INTO BITACORA_ORDER_DETAIL VALUES (USER,'DELETE',PID_DETAIL,PID_PROVIDER_BY_PRODUCT,PQUATITY_IN,PPRICE_BY_PRODUCT,PID_ORDER,SYSDATE);
END;

--UPDATING ORDER_DETAIL
CREATE OR REPLACE PROCEDURE B_ORDER_DETAIL_UPDATE (PID_DETAIL IN BITACORA_ORDER_DETAIL.ID_DETAIL%TYPE,
PID_PROVIDER_BY_PRODUCT IN BITACORA_ORDER_DETAIL.ID_PROVIDER_BY_PRODUCT%TYPE,
PQUATITY_IN IN BITACORA_ORDER_DETAIL.QUATITY_IN%TYPE,
PPRICE_BY_PRODUCT IN BITACORA_ORDER_DETAIL.PRICE_BY_PRODUCT%TYPE,
PID_ORDER IN BITACORA_ORDER_DETAIL.ID_ORDER%TYPE) AS
BEGIN
  INSERT INTO BITACORA_ORDER_DETAIL VALUES (USER,'UPDATING',PID_DETAIL,PID_PROVIDER_BY_PRODUCT,PQUATITY_IN,PPRICE_BY_PRODUCT,PID_ORDER,SYSDATE);
END;

SELECT * FROM BITACORA_ORDER_DETAIL;
SELECT * FROM ORDER_DETAIL;


--DISPATCH_BY_WAREHOUSE
CREATE TABLE BITACORA_DBW (
    ID_USER_B      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_DISPATCH_BY_WAREHOUSE  INTEGER NOT NULL,
    ID_BRANCH                 INTEGER NOT NULL,
    ID_USER                   INTEGER NOT NULL,
    LAST_SENT                 DATE NOT NULL,
    DATE_TIME    DATE NOT NULL
);

CREATE OR REPLACE TRIGGER B_DBW AFTER INSERT OR UPDATE OR DELETE ON DISPATCH_BY_WAREHOUSE FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_DBW_CREATE(:new.ID_DISPATCH_BY_WAREHOUSE , :new.ID_BRANCH, :new.ID_USER , :new.LAST_SENT );
    ELSIF DELETING  THEN
    B_DBW_DELETE(:old.ID_DISPATCH_BY_WAREHOUSE , :old.ID_BRANCH, :old.ID_USER , :old.LAST_SENT );
    ELSIF UPDATING THEN
    B_DBW_UPDATE(:old.ID_DISPATCH_BY_WAREHOUSE , :old.ID_BRANCH, :old.ID_USER , :old.LAST_SENT );
    END IF;
END;

--INSERTING DISPATCH_BY_WAREHOUSE
CREATE OR REPLACE PROCEDURE B_DBW_CREATE (PID_DISPATCH_BY_WAREHOUSE IN BITACORA_DBW.ID_DISPATCH_BY_WAREHOUSE%TYPE,
 PID_BRANCH IN BITACORA_DBW.ID_BRANCH%TYPE ,PID_USER IN BITACORA_DBW.ID_USER%TYPE , PLAST_SENT IN  BITACORA_DBW.LAST_SENT%TYPE ) AS
BEGIN
  INSERT INTO BITACORA_DBW VALUES (USER,'INSERT',PID_DISPATCH_BY_WAREHOUSE,PID_BRANCH,PID_USER,PLAST_SENT,SYSDATE);
END;

--DELETING DISPATCH_BY_WAREHOUSE
CREATE OR REPLACE PROCEDURE B_DBW_DELETE (PID_DISPATCH_BY_WAREHOUSE IN BITACORA_DBW.ID_DISPATCH_BY_WAREHOUSE%TYPE,
 PID_BRANCH IN BITACORA_DBW.ID_BRANCH%TYPE ,PID_USER IN BITACORA_DBW.ID_USER%TYPE , PLAST_SENT IN  BITACORA_DBW.LAST_SENT%TYPE ) AS
BEGIN
  INSERT INTO BITACORA_DBW VALUES (USER,'DELETE',PID_DISPATCH_BY_WAREHOUSE,PID_BRANCH,PID_USER,PLAST_SENT,SYSDATE);
END;

--UPDATING DISPATCH_BY_WAREHOUSE
CREATE OR REPLACE PROCEDURE B_DBW_UPDATE (PID_DISPATCH_BY_WAREHOUSE IN BITACORA_DBW.ID_DISPATCH_BY_WAREHOUSE%TYPE,
 PID_BRANCH IN BITACORA_DBW.ID_BRANCH%TYPE ,PID_USER IN BITACORA_DBW.ID_USER%TYPE , PLAST_SENT IN  BITACORA_DBW.LAST_SENT%TYPE ) AS
BEGIN
  INSERT INTO BITACORA_DBW VALUES (USER,'UPDATE',PID_DISPATCH_BY_WAREHOUSE,PID_BRANCH,PID_USER,PLAST_SENT,SYSDATE);
END;

SELECT * FROM BITACORA_DBW;
SELECT * FROM DISPATCH_BY_WAREHOUSE;


----DISPATCH_DETAILS
CREATE TABLE BITACORA_DISPATCH_DETAILS (
    ID_USER      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_DISPATCH               INTEGER NOT NULL,
    ID_DISPATCH_BY_WAREHOUSE  INTEGER NOT NULL,
    QUANTITY_OUT              INTEGER NOT NULL,
    ID_PROVIDER_BY_PRODUCT    INTEGER NOT NULL,
    DATE_TIME    DATE NOT NULL
);


CREATE OR REPLACE TRIGGER B_DISPATCH_DETAILS AFTER INSERT OR UPDATE OR DELETE ON DISPATCH_DETAILS FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_DISPATCH_DETAILS_CREATE(:new.ID_DISPATCH,:new.ID_DISPATCH_BY_WAREHOUSE,:new.QUANTITY_OUT,:new.ID_PROVIDER_BY_PRODUCT);
    ELSIF DELETING  THEN
    B_DISPATCH_DETAILS_DELETE(:old.ID_DISPATCH,:old.ID_DISPATCH_BY_WAREHOUSE,:old.QUANTITY_OUT,:old.ID_PROVIDER_BY_PRODUCT);
    ELSIF UPDATING THEN
    B_DISPATCH_DETAILS_UPDATE(:old.ID_DISPATCH,:old.ID_DISPATCH_BY_WAREHOUSE,:old.QUANTITY_OUT,:old.ID_PROVIDER_BY_PRODUCT);
    END IF;
END;


--INSERTING DISPATCH_DETAILS
CREATE OR REPLACE PROCEDURE B_DISPATCH_DETAILS_CREATE (PID_DISPATCH IN BITACORA_DISPATCH_DETAILS.ID_DISPATCH%TYPE, PID_DISPATCH_BY_WAREHOUSE IN BITACORA_DISPATCH_DETAILS.ID_DISPATCH_BY_WAREHOUSE%TYPE,
PQUANTITY_OUT IN BITACORA_DISPATCH_DETAILS.QUANTITY_OUT%TYPE, PID_PROVIDER_BY_PRODUCT IN BITACORA_DISPATCH_DETAILS.ID_PROVIDER_BY_PRODUCT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_DISPATCH_DETAILS VALUES (USER,'INSERT',PID_DISPATCH,PID_DISPATCH_BY_WAREHOUSE,PQUANTITY_OUT,PID_PROVIDER_BY_PRODUCT,SYSDATE);
END;

--DELETING DISPATCH_DETAILS
CREATE OR REPLACE PROCEDURE B_DISPATCH_DETAILS_DELETE (PID_DISPATCH IN BITACORA_DISPATCH_DETAILS.ID_DISPATCH%TYPE, PID_DISPATCH_BY_WAREHOUSE IN BITACORA_DISPATCH_DETAILS.ID_DISPATCH_BY_WAREHOUSE%TYPE,
PQUANTITY_OUT IN BITACORA_DISPATCH_DETAILS.QUANTITY_OUT%TYPE, PID_PROVIDER_BY_PRODUCT IN BITACORA_DISPATCH_DETAILS.ID_PROVIDER_BY_PRODUCT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_DISPATCH_DETAILS VALUES (USER,'DELETE',PID_DISPATCH,PID_DISPATCH_BY_WAREHOUSE,PQUANTITY_OUT,PID_PROVIDER_BY_PRODUCT,SYSDATE);
END;

--UPDATING DISPATCH_DETAILS
CREATE OR REPLACE PROCEDURE B_DISPATCH_DETAILS_UPDATE (PID_DISPATCH IN BITACORA_DISPATCH_DETAILS.ID_DISPATCH%TYPE, PID_DISPATCH_BY_WAREHOUSE IN BITACORA_DISPATCH_DETAILS.ID_DISPATCH_BY_WAREHOUSE%TYPE,
PQUANTITY_OUT IN BITACORA_DISPATCH_DETAILS.QUANTITY_OUT%TYPE, PID_PROVIDER_BY_PRODUCT IN BITACORA_DISPATCH_DETAILS.ID_PROVIDER_BY_PRODUCT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_DISPATCH_DETAILS VALUES (USER,'UPDATING',PID_DISPATCH,PID_DISPATCH_BY_WAREHOUSE,PQUANTITY_OUT,PID_PROVIDER_BY_PRODUCT,SYSDATE);
END;

SELECT * FROM BITACORA_DISPATCH_DETAILS;
SELECT * FROM DISPATCH_DETAILS;

DESC DISPATCH_DETAILS;

SELECT * FROM DISPATCH_BY_WAREHOUSE; --12 
SELECT * FROM PROVIDER_BY_PRODUCT; --26 , --29
SELECT * FROM PRODUCT; --29 , 100

CALL CREATE_DISPATCH_DETAILS (12,100,26);
CALL UPDATE_DISPATCH_DETAILS (N,12,10,26);

BEGIN
    DELETE_DISPATCH_DETAILS (N);
END;

SELECT ID_PRODUCT , QUANTITY FROM PROVIDER_BY_PRODUCT WHERE ID_PRODUCT = ID_PRODUCT;
