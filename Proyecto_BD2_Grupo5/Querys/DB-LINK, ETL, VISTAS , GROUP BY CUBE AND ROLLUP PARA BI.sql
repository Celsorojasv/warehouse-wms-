CREATE USER WAREHOUSE_REPORTS IDENTIFIED BY ROOT

--Conexion DB-Link

CREATE DATABASE LINK WAREHOUSE_LINK CONNECT TO WAREHOUSE IDENTIFIED BY ROOT USING
'(DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = xe)
    )
)';

--ETL Para multiples Tablas.

CREATE OR REPLACE PROCEDURE SP_ETL (SQL_TABLE_NAME IN VARCHAR2, QUERY_NAME IN VARCHAR2) IS
   ddl_script VARCHAR2(1000);
   exist INTEGER;
BEGIN

    SELECT COUNT(*) INTO exist FROM SYS.ALL_TABLES WHERE TABLE_NAME=SQL_TABLE_NAME; 
    
    IF (exist)=1 THEN 
        ddl_script := 'DROP TABLE '|| SQL_TABLE_NAME;
        EXECUTE IMMEDIATE ddl_script;
    END IF;
    ddl_script := ' CREATE TABLE '|| SQL_TABLE_NAME || ' AS ' || QUERY_NAME;
        
    EXECUTE IMMEDIATE ddl_script;
    EXCEPTION 
  WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('DDL FALLO '||SQL_TABLE_NAME||':: ERROR::'||SQLERRM);
END;
/

--Llamados al ETL Tablas Para reportes en el Bi

EXECUTE SP_ETL('TOTAL_VENTAS_PROVEDOR', 'SELECT * FROM QUERY1@WAREHOUSE_LINK');

EXECUTE SP_ETL('PRODUCTO_MAX', 'SELECT * FROM QUERY2@WAREHOUSE_LINK');

EXECUTE SP_ETL('CUBO_DESPACHADORES', 'SELECT * FROM QUERY3@WAREHOUSE_LINK');

EXECUTE SP_ETL('ROLLUP_PROVEEDORES_FECHA', 'SELECT * FROM QUERY4@WAREHOUSE_LINK');


--VISTAS

--Retorna el nombre del provedoor , cantidad y total de compras que se realizaron. 
Create view Query1 as SELECT P.NAME_PROVIDER, COUNT(1) as CANTIDAD, SUM(TOTAL_VENTA) AS TOTAL_VENTA FROM (
    SELECT OD.ID_ORDER, PBP.ID_PROVIDER, PBP.QUANTITY * PRICE_PRODUCT TOTAL_VENTA
    FROM ORDER_DETAIL OD
    LEFT JOIN PROVIDER_BY_PRODUCT PBP ON OD.ID_PROVIDER_BY_PRODUCT = PBP.ID_PROVIDER_BY_PRODUCT
    ORDER BY OD.ID_ORDER) R
JOIN PROVIDER P ON R.ID_PROVIDER = P.ID_PROVIDER
GROUP BY p.name_provider
ORDER BY P.NAME_PROVIDER
;


--Retorna proveedor, producto mas vendido, cantidad de productos vendidos %.
CREATE VIEW Query2 AS SELECT pr.name_provider, p.name_product, MAX(C) AS PRODUCTOS_VENDIDOS, r.av precio_promedio
FROM 
(
    SELECT PBP.ID_PROVIDER PROV, PBP.ID_PRODUCT PROD, count(1) AS C, avg(pbp.price_product) av
    FROM ORDER_DETAIL OD
    LEFT JOIN PROVIDER_BY_PRODUCT PBP ON OD.ID_PROVIDER_BY_PRODUCT = PBP.ID_PROVIDER_BY_PRODUCT
    group by PBP.ID_PROVIDER, PBP.ID_PRODUCT
) R
join product p on r.prod = p.id_product
join provider pr on r.prov = pr.id_provider
group by  pr.name_provider, p.name_product, r.av
order by MAX(C) desc
;


--GROUP BY CUBE y ROLLUP

---GROUP BY CUBE
--Cantidad de despachos por usuario y proveedor. 
CREATE VIEW Query3 AS SELECT WU.NAME_USER "NOMBRE USUARIO", P.NAME_PROVIDER, SUM(DD.QUANTITY_OUT) CANTIDAD_SALIDA
FROM DISPATCH_DETAILS DD
LEFT JOIN PROVIDER_BY_PRODUCT PBP ON DD.ID_PROVIDER_BY_PRODUCT = PBP.ID_PROVIDER_BY_PRODUCT
LEFT JOIN PROVIDER P ON PBP.ID_PROVIDER = P.ID_PROVIDER
LEFT JOIN WAREHOUSE_USER WU ON PBP.ID_USER = WU.ID_USER
WHERE P.ID_PROVIDER IN (
    SELECT SS.ID_PROVIDER FROM (
        SELECT PBP.ID_PROVIDER, SUM(DD.QUANTITY_OUT)S
        FROM DISPATCH_DETAILS DD
        LEFT JOIN PROVIDER_BY_PRODUCT PBP ON DD.ID_PROVIDER_BY_PRODUCT = PBP.ID_PROVIDER_BY_PRODUCT
        GROUP BY PBP.ID_PROVIDER
        ORDER BY SUM(DD.QUANTITY_OUT) DESC
    ) SS
    WHERE ROWNUM < 11
)
GROUP BY CUBE(WU.NAME_USER, P.NAME_PROVIDER)
ORDER BY WU.NAME_USER, P.NAME_PROVIDER;



---ROLLUP 
--Cantidad de despachos por proveedor y sus fechas  Basado en fechas ingresadas* (2018 - 2020)
CREATE VIEW Query4 AS SELECT P.NAME_PROVIDER, DW.LAST_SENT FECHA_SALIDA, SUM(DD.QUANTITY_OUT) CANTIDAD_SALIDA
FROM DISPATCH_DETAILS DD
LEFT JOIN PROVIDER_BY_PRODUCT PBP ON DD.ID_PROVIDER_BY_PRODUCT = PBP.ID_PROVIDER_BY_PRODUCT
LEFT JOIN PROVIDER P ON PBP.ID_PROVIDER = P.ID_PROVIDER
RIGHT JOIN DISPATCH_BY_WAREHOUSE DW ON DW.ID_DISPATCH_BY_WAREHOUSE = DD.ID_DISPATCH_BY_WAREHOUSE
WHERE P.ID_PROVIDER IN (
    SELECT SS.ID_PROVIDER FROM (
        SELECT PBP.ID_PROVIDER, SUM(DD.QUANTITY_OUT)S
        FROM DISPATCH_DETAILS DD
        LEFT JOIN PROVIDER_BY_PRODUCT PBP ON DD.ID_PROVIDER_BY_PRODUCT = PBP.ID_PROVIDER_BY_PRODUCT
        GROUP BY PBP.ID_PROVIDER
        ORDER BY SUM(DD.QUANTITY_OUT) DESC
    ) SS
    WHERE ROWNUM < 11
)
GROUP BY ROLLUP(P.NAME_PROVIDER, DW.LAST_SENT)
;