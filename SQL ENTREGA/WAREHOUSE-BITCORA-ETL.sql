
CREATE SEQUENCE SQ_BRANCH INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE SQ_CATEGORY INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE SQ_DISPATCH_BY_WAREHOUSE INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE SQ_DISPATCH_DETAILS INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE SQ_N_ORDER INCREMENT BY 1 START WITH 1;
	
CREATE SEQUENCE SQ_ORDER_DETAIL INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE SQ_PRODUCT INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE SQ_PROVIDER INCREMENT BY 1 START WITH 1;

CREATE SEQUENCE SQ_PROVIDER_BY_PRODUCT INCREMENT BY 1 START WITH 1;
	
CREATE SEQUENCE SQ_WAREHOUSE_USER INCREMENT BY 1 START WITH 1;



CREATE TABLE WAREHOUSE_USER (
    ID_USER     INTEGER NOT NULL PRIMARY KEY,
    NAME_USER   VARCHAR2(220) NOT NULL,
    PHONE_USER  VARCHAR2(15),
    JOB_TITLE   VARCHAR2(220)
);

CREATE TABLE BRANCH ( 
    ID_BRANCH       INTEGER NOT NULL PRIMARY KEY,
    NAME_BRANCH     VARCHAR2(120) NOT NULL,
    ADDRESS_BRANCH  VARCHAR2(220) NOT NULL,
    PHONE_BRANCH    VARCHAR2(15) NOT NULL
);

CREATE TABLE CATEGORY (
    ID_CATEGORY  INTEGER NOT NULL PRIMARY KEY,
    NAME         VARCHAR2(50),
    DESCRIPTION  VARCHAR2(100) 
);

CREATE TABLE N_ORDER (
    ID_ORDER      INTEGER NOT NULL PRIMARY KEY,
    DATE_TIME     DATE NOT NULL,
    TOTAL_AMOUNT  NUMBER(10, 2) NOT NULL
);

CREATE TABLE PRODUCT (
    ID_PRODUCT       INTEGER NOT NULL PRIMARY KEY,
    NAME_PRODUCT     VARCHAR2(120) NOT NULL,
    CREATED_PRODUCT  DATE NOT NULL,
    ID_CATEGORY INTEGER NOT NULL,
    CONSTRAINT PRODUCT_CATEGORY_FK FOREIGN KEY (ID_CATEGORY) REFERENCES   CATEGORY(ID_CATEGORY)
);


CREATE TABLE PROVIDER (
    ID_PROVIDER       INTEGER NOT NULL PRIMARY KEY,
    NAME_PROVIDER     VARCHAR2(250) NOT NULL,
    NIT_PROVIDER      VARCHAR2(15),
    PHONE_PROVIDER    VARCHAR2(15),
    ADDRESS_PROVIDER  VARCHAR2(220)
);


CREATE TABLE PROVIDER_BY_PRODUCT (
    ID_PROVIDER_BY_PRODUCT  INTEGER NOT NULL PRIMARY KEY,
    LAST_ADDED              DATE NOT NULL,
    ID_PROVIDER             INTEGER NOT NULL,
    ID_PRODUCT              INTEGER NOT NULL,
    ID_USER                 INTEGER NOT NULL,
    QUANTITY                INTEGER NOT NULL,
    PRICE_PRODUCT           FLOAT(10) NOT NULL,
    CONSTRAINT PROVIDER_DETAIL_FK FOREIGN KEY (ID_PROVIDER) REFERENCES   PROVIDER(ID_PROVIDER),
    CONSTRAINT PRODUCT_DETAIL_FK FOREIGN KEY (ID_PRODUCT) REFERENCES   PRODUCT(ID_PRODUCT),
    CONSTRAINT USER_DETAIL_FK FOREIGN KEY (ID_USER) REFERENCES   WAREHOUSE_USER(ID_USER)
);


CREATE TABLE ORDER_DETAIL (
    ID_DETAIL               INTEGER NOT NULL PRIMARY KEY,
    ID_PROVIDER_BY_PRODUCT  INTEGER NOT NULL,
    QUANTITY_IN              INTEGER NOT NULL,
    PRICE_BY_PRODUCT        NUMBER (10,2) NOT NULL,
    ID_ORDER                INTEGER NOT NULL,
    CONSTRAINT PROV_PROD_DETAIL_FK FOREIGN KEY (ID_PROVIDER_BY_PRODUCT) REFERENCES   PROVIDER_BY_PRODUCT(ID_PROVIDER_BY_PRODUCT),
        CONSTRAINT ORDER_FK FOREIGN KEY (ID_ORDER) REFERENCES   N_ORDER(ID_ORDER)
);

CREATE TABLE DISPATCH_BY_WAREHOUSE (
    ID_DISPATCH_BY_WAREHOUSE  INTEGER NOT NULL PRIMARY KEY,
    ID_BRANCH                 INTEGER NOT NULL,
    ID_USER                   INTEGER NOT NULL,
    LAST_SENT                 DATE NOT NULL,
        CONSTRAINT BRANCH_DISPATCH_FK FOREIGN KEY (ID_BRANCH) REFERENCES   BRANCH(ID_BRANCH),
            CONSTRAINT USER_DISPATCH_FK FOREIGN KEY (ID_USER) REFERENCES   WAREHOUSE_USER(ID_USER)
);


CREATE TABLE DISPATCH_DETAILS (
    ID_DISPATCH               INTEGER NOT NULL PRIMARY KEY,
    ID_DISPATCH_BY_WAREHOUSE  INTEGER NOT NULL,
    QUANTITY_OUT              INTEGER NOT NULL,
    ID_PROVIDER_BY_PRODUCT    INTEGER NOT NULL,
    CONSTRAINT PROV_PROD1_DETAIL_FK FOREIGN KEY (ID_PROVIDER_BY_PRODUCT) REFERENCES   PROVIDER_BY_PRODUCT(ID_PROVIDER_BY_PRODUCT),
    CONSTRAINT DISPATCH1_DETAIL_FK FOREIGN KEY (ID_DISPATCH_BY_WAREHOUSE) REFERENCES   DISPATCH_BY_WAREHOUSE(ID_DISPATCH_BY_WAREHOUSE)
);


--PROCEDIMIENTOS CRUD WAREHOUSE_USER
--CREATE
CREATE OR REPLACE PROCEDURE CREATE_WAREHOUSE_USER(PNAME_USER IN WAREHOUSE_USER.NAME_USER%TYPE,PPHONE_USER IN WAREHOUSE_USER.PHONE_USER%TYPE,PJOB_TITLE WAREHOUSE_USER.JOB_TITLE%TYPE)AS
BEGIN
    INSERT INTO WAREHOUSE_USER (ID_USER,NAME_USER,PHONE_USER,JOB_TITLE) VALUES (SQ_WAREHOUSE_USER.NEXTVAL,PNAME_USER,PPHONE_USER,PJOB_TITLE);
    COMMIT;
END;

--UPDATE
CREATE OR REPLACE PROCEDURE UPDATE_WAREHOUSE_USER(PID_USER IN WAREHOUSE_USER.ID_USER%TYPE,PNAME_USER IN WAREHOUSE_USER.NAME_USER%TYPE,PPHONE_USER IN WAREHOUSE_USER.PHONE_USER%TYPE,PJOB_TITLE WAREHOUSE_USER.JOB_TITLE%TYPE)AS
BEGIN

    UPDATE WAREHOUSE_USER
    SET
    NAME_USER = PNAME_USER,
    PHONE_USER = PPHONE_USER,
    JOB_TITLE = PJOB_TITLE
    WHERE
    ID_USER = PID_USER;
    COMMIT;
END; 

--DELETE
CREATE OR REPLACE PROCEDURE DELETE_WAREHOUSE_USER (PID_USER IN WAREHOUSE_USER.ID_USER%TYPE) IS
BEGIN
    DELETE FROM WAREHOUSE_USER WHERE ID_USER = PID_USER;
END DELETE_WAREHOUSE_USER ;


--PROCEDIMIENTOS CRUD BRANCH
--CREATE
CREATE OR REPLACE PROCEDURE CREATE_BRANCH (PNAME_BRANCH IN BRANCH.NAME_BRANCH%TYPE,PADDRESS_BRANCH IN BRANCH.ADDRESS_BRANCH%TYPE,PPHONE_BRANCH IN BRANCH.PHONE_BRANCH%TYPE) AS
BEGIN
  INSERT INTO BRANCH (ID_BRANCH,NAME_BRANCH,ADDRESS_BRANCH,PHONE_BRANCH) VALUES (SQ_BRANCH.NEXTVAL,PNAME_BRANCH,PADDRESS_BRANCH,PPHONE_BRANCH);
  COMMIT;
END;

--UPDATE
CREATE OR REPLACE PROCEDURE UPDATE_BRANCH (PID_BRANCH IN BRANCH.ID_BRANCH%TYPE, PNAME_BRANCH IN BRANCH.NAME_BRANCH%TYPE,PADDRESS_BRANCH IN BRANCH.ADDRESS_BRANCH%TYPE,PPHONE_BRANCH IN BRANCH.PHONE_BRANCH%TYPE) AS
BEGIN
  UPDATE BRANCH
  SET 
  NAME_BRANCH = PNAME_BRANCH, ADDRESS_BRANCH = PADDRESS_BRANCH , PHONE_BRANCH = PPHONE_BRANCH
  WHERE
  ID_BRANCH = PID_BRANCH;
  COMMIT;
END;

--DELETE
CREATE OR REPLACE PROCEDURE DELETE_BRANCH (PID_BRANCH IN BRANCH.ID_BRANCH%TYPE) AS
BEGIN
  DELETE FROM BRANCH WHERE ID_BRANCH =  PID_BRANCH;
END DELETE_BRANCH;


--PROCEDIMIENTOS CRUD CATEGORY
--CREATE
CREATE OR REPLACE PROCEDURE CREATE_CATEGORY (PNAME IN CATEGORY.NAME%TYPE, PDESCRIPTION IN CATEGORY.DESCRIPTION%TYPE) AS
BEGIN
    INSERT INTO CATEGORY (ID_CATEGORY,NAME,DESCRIPTION) VALUES (SQ_CATEGORY.NEXTVAL,PNAME,PDESCRIPTION);
    COMMIT;
END;

--UPDATE
CREATE OR REPLACE PROCEDURE UPDATE_CATEGORY (PID_CATEGORY IN CATEGORY.ID_CATEGORY%TYPE, PNAME IN CATEGORY.NAME%TYPE, PDESCRIPTION IN CATEGORY.DESCRIPTION%TYPE) AS
BEGIN
    UPDATE CATEGORY
    SET
    NAME = PNAME,
    DESCRIPTION = PDESCRIPTION
    WHERE
    ID_CATEGORY = PID_CATEGORY;
    COMMIT;
END;

--DELETE
CREATE OR REPLACE PROCEDURE DELETE_CATEGORY (PID_CATEGORY IN CATEGORY.ID_CATEGORY%TYPE) IS
BEGIN
  DELETE FROM CATEGORY WHERE ID_CATEGORY =  PID_CATEGORY;
END DELETE_CATEGORY;

--PROCEDIMIENTOS CRUD N_ORDER
--CREATE
CREATE OR REPLACE PROCEDURE CREATE_N_ORDER(PDATE_TIME IN N_ORDER.DATE_TIME%TYPE, PTOTAL_AMOUNT IN N_ORDER.TOTAL_AMOUNT%TYPE)AS
BEGIN
    INSERT INTO N_ORDER (ID_ORDER,DATE_TIME,TOTAL_AMOUNT) VALUES (SQ_N_ORDER.NEXTVAL,PDATE_TIME,PTOTAL_AMOUNT);
    COMMIT;
END;


--UPDATE
CREATE OR REPLACE PROCEDURE UPDATE_N_ORDER (PID_ORDER IN N_ORDER.ID_ORDER%TYPE, PDATE_TIME IN N_ORDER.DATE_TIME%TYPE, PTOTAL_AMOUNT IN N_ORDER.TOTAL_AMOUNT%TYPE)AS
BEGIN
    UPDATE N_ORDER
    SET 
    DATE_TIME = PDATE_TIME,
    TOTAL_AMOUNT = PTOTAL_AMOUNT
    WHERE
    ID_ORDER = PID_ORDER;
    COMMIT;
END;


--DELETE
CREATE OR REPLACE PROCEDURE DELETE_N_ORDER (PID_ORDER IN N_ORDER.ID_ORDER%TYPE) IS
BEGIN
    DELETE FROM N_ORDER WHERE ID_ORDER = PID_ORDER;
END DELETE_N_ORDER ;

--PROCEDIMIENTOS CRUD PRODUCT
--CREATE
CREATE OR REPLACE PROCEDURE CREATE_PRODUCT (PNAME_PRODUCT IN PRODUCT.NAME_PRODUCT%TYPE, PCREATED_PRODUCT IN PRODUCT.CREATED_PRODUCT%TYPE,
PID_CATEGORY IN PRODUCT.ID_CATEGORY%TYPE) AS
BEGIN 
    INSERT INTO PRODUCT(ID_PRODUCT,NAME_PRODUCT,CREATED_PRODUCT,ID_CATEGORY) VALUES (SQ_PRODUCT.NEXTVAL,PNAME_PRODUCT,PCREATED_PRODUCT,PID_CATEGORY);
    COMMIT;
END;

--UPDATE
CREATE OR REPLACE PROCEDURE UPDATE_PRODUCT (PID_PRODUCT IN PRODUCT.ID_PRODUCT%TYPE, PNAME_PRODUCT IN PRODUCT.NAME_PRODUCT%TYPE, PCREATED_PRODUCT IN PRODUCT.CREATED_PRODUCT%TYPE,
PID_CATEGORY IN PRODUCT.ID_CATEGORY%TYPE) AS
BEGIN   
    UPDATE PRODUCT 
    SET
    NAME_PRODUCT = PNAME_PRODUCT,
    CREATED_PRODUCT = PCREATED_PRODUCT,
    ID_CATEGORY = PID_CATEGORY
    WHERE
    ID_PRODUCT = PID_PRODUCT;
    COMMIT;
END;

--DELETE
CREATE OR REPLACE PROCEDURE DELETE_PRODUCT (PID_PRODUCT IN PRODUCT.ID_PRODUCT%TYPE) IS
BEGIN
  DELETE FROM PRODUCT WHERE ID_PRODUCT =  PID_PRODUCT;
END DELETE_PRODUCT;

--PROCEDIMIENTOS CRUD PROVIDER
--CREATE
CREATE OR REPLACE PROCEDURE CREATE_PROVIDER (PNAME_PROVIDER IN PROVIDER.NAME_PROVIDER%TYPE, PNIT_PROVIDER IN PROVIDER.NIT_PROVIDER%TYPE,
PPHONE_PROVIDER IN PROVIDER.PHONE_PROVIDER%TYPE,PADDRESS_PROVIDER IN PROVIDER.ADDRESS_PROVIDER%TYPE) AS
BEGIN
    INSERT INTO PROVIDER (ID_PROVIDER,NAME_PROVIDER,NIT_PROVIDER,PHONE_PROVIDER,ADDRESS_PROVIDER) VALUES (SQ_PROVIDER.NEXTVAL,PNAME_PROVIDER,PNIT_PROVIDER,PPHONE_PROVIDER,PADDRESS_PROVIDER);
    COMMIT;
END;

--UPDATE
CREATE OR REPLACE PROCEDURE UPDATE_PROVIDER (PID_PROVIDER IN PROVIDER.ID_PROVIDER%TYPE,PNAME_PROVIDER IN PROVIDER.NAME_PROVIDER%TYPE, PNIT_PROVIDER IN PROVIDER.NIT_PROVIDER%TYPE,
PPHONE_PROVIDER IN PROVIDER.PHONE_PROVIDER%TYPE,PADDRESS_PROVIDER IN PROVIDER.ADDRESS_PROVIDER%TYPE) AS
BEGIN 
    UPDATE PROVIDER
    SET
    NAME_PROVIDER = PNAME_PROVIDER,
    NIT_PROVIDER = PNIT_PROVIDER,
    PHONE_PROVIDER = PPHONE_PROVIDER,
    ADDRESS_PROVIDER = PADDRESS_PROVIDER
    WHERE
    ID_PROVIDER  = PID_PROVIDER;
    COMMIT;
END;

--DELETE
CREATE OR REPLACE PROCEDURE DELETE_PROVIDER (PID_PROVIDER IN PROVIDER.ID_PROVIDER%TYPE) IS
BEGIN
    DELETE FROM PROVIDER WHERE ID_PROVIDER = PID_PROVIDER;
END DELETE_PROVIDER;


--PROCEDIMIENTOS CRUD PROVIDER_BY_PRODUCT
--CREATE
CREATE OR REPLACE PROCEDURE CREATE_PROVIDER_BY_PRODUCT(PLAST_ADDED IN PROVIDER_BY_PRODUCT.LAST_ADDED%TYPE,PID_PROVIDER IN PROVIDER_BY_PRODUCT.ID_PROVIDER%TYPE,
PID_PRODUCT IN  PROVIDER_BY_PRODUCT.ID_PRODUCT%TYPE,PID_USER IN PROVIDER_BY_PRODUCT.ID_USER%TYPE,PQUANTITY IN PROVIDER_BY_PRODUCT.QUANTITY%TYPE,PPRICE_PRODUCT IN PROVIDER_BY_PRODUCT.PRICE_PRODUCT%TYPE)AS
BEGIN
    INSERT INTO PROVIDER_BY_PRODUCT (ID_PROVIDER_BY_PRODUCT,LAST_ADDED,ID_PROVIDER,ID_PRODUCT,ID_USER,QUANTITY,PRICE_PRODUCT) VALUES (SQ_PROVIDER_BY_PRODUCT.NEXTVAL,PLAST_ADDED,PID_PROVIDER,PID_PRODUCT,PID_USER,PQUANTITY,PPRICE_PRODUCT);
    COMMIT;
END;

--UPDATE
CREATE OR REPLACE PROCEDURE UPDATE_PROVIDER_BY_PRODUCT (PID_PROVIDER_BY_PRODUCT IN PROVIDER_BY_PRODUCT.ID_PROVIDER_BY_PRODUCT%TYPE,PLAST_ADDED IN PROVIDER_BY_PRODUCT.LAST_ADDED%TYPE,PID_PROVIDER IN PROVIDER_BY_PRODUCT.ID_PROVIDER%TYPE,
PID_PRODUCT IN  PROVIDER_BY_PRODUCT.ID_PRODUCT%TYPE,PID_USER IN PROVIDER_BY_PRODUCT.ID_USER%TYPE,PQUANTITY IN PROVIDER_BY_PRODUCT.QUANTITY%TYPE,PPRICE_PRODUCT IN PROVIDER_BY_PRODUCT.PRICE_PRODUCT%TYPE)AS
BEGIN
    UPDATE PROVIDER_BY_PRODUCT
    SET 
    LAST_ADDED = PLAST_ADDED,
    ID_PROVIDER = PID_PROVIDER,
    ID_PRODUCT = PID_PRODUCT,
    ID_USER = PID_USER,
    QUANTITY = QUANTITY + PQUANTITY,
    PRICE_PRODUCT = PPRICE_PRODUCT
    WHERE
    ID_PROVIDER_BY_PRODUCT = PID_PROVIDER_BY_PRODUCT;
    COMMIT;
END;


--DELETE
CREATE OR REPLACE PROCEDURE DELETE_PROVIDER_BY_PRODUCT (PID_PROVIDER_BY_PRODUCT IN PROVIDER_BY_PRODUCT.ID_PROVIDER_BY_PRODUCT%TYPE) IS
BEGIN
    DELETE FROM PROVIDER_BY_PRODUCT WHERE ID_PROVIDER_BY_PRODUCT = PID_PROVIDER_BY_PRODUCT;
END DELETE_PROVIDER_BY_PRODUCT ;


--PROCEDIMIENTOS CRUD ORDER_DETAIL
--CREATE
CREATE OR REPLACE PROCEDURE CREATE_ORDER_DETAIL(PID_PROVIDER_BY_PRODUCT IN ORDER_DETAIL.ID_PROVIDER_BY_PRODUCT%TYPE,PQUANTITY_IN IN ORDER_DETAIL.QUANTITY_IN%TYPE,
PPRICE_BY_PRODUCT IN ORDER_DETAIL.PRICE_BY_PRODUCT%TYPE,PID_ORDER IN ORDER_DETAIL.ID_ORDER%TYPE)AS
BEGIN
    INSERT INTO ORDER_DETAIL (ID_DETAIL,ID_PROVIDER_BY_PRODUCT,QUANTITY_IN,PRICE_BY_PRODUCT,ID_ORDER) VALUES (SQ_ORDER_DETAIL.NEXTVAL,PID_PROVIDER_BY_PRODUCT,PQUANTITY_IN,PPRICE_BY_PRODUCT,PID_ORDER);
    COMMIT;
END;

--UPDATE
CREATE OR REPLACE PROCEDURE UPDATE_ORDER_DETAIL(PID_DETAIL IN ORDER_DETAIL.ID_DETAIL%TYPE,PID_PROVIDER_BY_PRODUCT IN ORDER_DETAIL.ID_PROVIDER_BY_PRODUCT%TYPE,PQUANTITY_IN IN ORDER_DETAIL.QUANTITY_IN%TYPE,
PPRICE_BY_PRODUCT IN ORDER_DETAIL.PRICE_BY_PRODUCT%TYPE,PID_ORDER IN ORDER_DETAIL.ID_ORDER%TYPE) AS
BEGIN
    UPDATE ORDER_DETAIL
    SET 
    ID_PROVIDER_BY_PRODUCT = PID_PROVIDER_BY_PRODUCT,
    QUANTITY_IN = PQUANTITY_IN,
    PRICE_BY_PRODUCT = PPRICE_BY_PRODUCT,
    ID_ORDER = PID_ORDER
    WHERE
    ID_DETAIL = PID_DETAIL;
    COMMIT;
END;

--DELETE
CREATE OR REPLACE PROCEDURE DELETE_ORDER_DETAIL (PID_DETAIL IN ORDER_DETAIL.ID_DETAIL%TYPE) IS
BEGIN
    DELETE FROM ORDER_DETAIL WHERE ID_DETAIL= PID_DETAIL;
END DELETE_ORDER_DETAIL ;

--PROCEDIMIENTOS CRUD DISPATCH_BY_WAREHOUSE
--CREATE
CREATE OR REPLACE PROCEDURE CREATE_DISPATCH_BY_WAREHOUSE(PID_BRANCH IN DISPATCH_BY_WAREHOUSE.ID_BRANCH%TYPE , PID_USER IN DISPATCH_BY_WAREHOUSE.ID_USER%TYPE ,
PLAST_SENT IN DISPATCH_BY_WAREHOUSE.LAST_SENT%TYPE)AS
BEGIN
    INSERT INTO DISPATCH_BY_WAREHOUSE (ID_DISPATCH_BY_WAREHOUSE,ID_BRANCH,ID_USER,LAST_SENT ) VALUES (SQ_DISPATCH_BY_WAREHOUSE.NEXTVAL,PID_BRANCH,PID_USER,PLAST_SENT);
    COMMIT;
END;

--UPDATE
CREATE OR REPLACE PROCEDURE UPDATE_DISPATCH_BY_WAREHOUSE (PID_DISPATCH_BY_WAREHOUSE IN DISPATCH_BY_WAREHOUSE.ID_DISPATCH_BY_WAREHOUSE%TYPE,PID_BRANCH IN DISPATCH_BY_WAREHOUSE.ID_BRANCH%TYPE , PID_USER IN DISPATCH_BY_WAREHOUSE.ID_USER%TYPE ,
PLAST_SENT IN DISPATCH_BY_WAREHOUSE.LAST_SENT%TYPE)AS
BEGIN
    UPDATE DISPATCH_BY_WAREHOUSE
    SET 
    ID_BRANCH = PID_BRANCH,
    ID_USER = PID_USER,
    LAST_SENT = PLAST_SENT
    WHERE
    ID_DISPATCH_BY_WAREHOUSE = PID_DISPATCH_BY_WAREHOUSE;
    COMMIT;
END;


--DELETE
CREATE OR REPLACE PROCEDURE DELETE_DISPATCH_BY_WAREHOUSE (PID_DISPATCH_BY_WAREHOUSE IN DISPATCH_BY_WAREHOUSE.ID_DISPATCH_BY_WAREHOUSE%TYPE) IS
BEGIN
    DELETE FROM DISPATCH_BY_WAREHOUSE WHERE ID_DISPATCH_BY_WAREHOUSE= PID_DISPATCH_BY_WAREHOUSE;
END DELETE_DISPATCH_BY_WAREHOUSE ;


--PROCEDIMIENTOS CRUD --DISPATCH_DETAILS
--CREATE
CREATE OR REPLACE PROCEDURE CREATE_DISPATCH_DETAILS(PID_DISPATCH_BY_WAREHOUSE IN DISPATCH_DETAILS.ID_DISPATCH_BY_WAREHOUSE%TYPE , PQUANTITY_OUT IN DISPATCH_DETAILS.QUANTITY_OUT%TYPE,
PID_PROVIDER_BY_PRODUCT IN DISPATCH_DETAILS.ID_PROVIDER_BY_PRODUCT%TYPE)AS
BEGIN
    INSERT INTO DISPATCH_DETAILS (ID_DISPATCH,ID_DISPATCH_BY_WAREHOUSE,QUANTITY_OUT,ID_PROVIDER_BY_PRODUCT) VALUES (SQ_DISPATCH_DETAILS.NEXTVAL,PID_DISPATCH_BY_WAREHOUSE,PQUANTITY_OUT,PID_PROVIDER_BY_PRODUCT);
    COMMIT;
END;

--UPDATE
CREATE OR REPLACE PROCEDURE UPDATE_DISPATCH_DETAILS(PID_DISPATCH IN DISPATCH_DETAILS.ID_DISPATCH%TYPE , PID_DISPATCH_BY_WAREHOUSE IN DISPATCH_DETAILS.ID_DISPATCH_BY_WAREHOUSE%TYPE , PQUANTITY_OUT IN DISPATCH_DETAILS.QUANTITY_OUT%TYPE,
PID_PROVIDER_BY_PRODUCT IN DISPATCH_DETAILS.ID_PROVIDER_BY_PRODUCT%TYPE)AS
BEGIN
    UPDATE DISPATCH_DETAILS
    SET 
    ID_DISPATCH_BY_WAREHOUSE = PID_DISPATCH_BY_WAREHOUSE,
    QUANTITY_OUT = PQUANTITY_OUT,
    ID_PROVIDER_BY_PRODUCT = PID_PROVIDER_BY_PRODUCT
    WHERE
    ID_DISPATCH = PID_DISPATCH;
    COMMIT;
END;

--DELETE
CREATE OR REPLACE PROCEDURE DELETE_DISPATCH_DETAILS (PID_DISPATCH IN DISPATCH_DETAILS.ID_DISPATCH%TYPE) IS
BEGIN
    DELETE FROM DISPATCH_DETAILS WHERE ID_DISPATCH = PID_DISPATCH;
    COMMIT;
END DELETE_DISPATCH_DETAILS ;



--TRIGGERS
--INGRESO 
CREATE OR REPLACE TRIGGER PRODUCT_IN AFTER INSERT 
ON ORDER_DETAIL FOR EACH ROW
BEGIN
    UPDATE N_ORDER SET TOTAL_AMOUNT = TOTAL_AMOUNT + :NEW.PRICE_BY_PRODUCT WHERE ID_ORDER = :NEW.ID_ORDER;
    UPDATE provider_by_product SET quantity = quantity + :new.quantity_in WHERE id_provider_by_product = :new.id_provider_by_product;
END;

--SALIDA
CREATE OR REPLACE TRIGGER PRODUCT_OUT BEFORE INSERT 
ON DISPATCH_DETAILS FOR EACH ROW
DECLARE
    current_qty INTEGER;
    pragma autonomous_transaction;
BEGIN
    SELECT quantity INTO current_qty FROM provider_by_product where id_provider_by_product = :new.id_provider_by_product;
    IF (current_qty > :new.quantity_out) then
        UPDATE provider_by_product SET quantity = quantity - :new.quantity_out WHERE id_provider_by_product = :new.id_provider_by_product;
    ELSE 
          raise_application_error(-20000
                , 'Bodega insuficiente para el despacho.');
    END IF;
END;



--SELECTS

SELECT no.id_order, p.name_product, ot.id_detail, ot.price_by_product, pbp.id_provider_by_product, ot.quantity_in, pbp.quantity FROM N_ORDER NO 
INNER JOIN ORDER_DETAIL OT 
    ON NO.ID_ORDER = OT.ID_ORDER
INNER JOIN provider_by_product PBP 
    ON ot.id_provider_by_product = pbp.id_provider_by_product
INNER JOIN PRODUCT P ON pbp.id_product = p.id_product;

SELECT dby.last_sent, dd.id_dispatch_by_warehouse, dd.quantity_out, pbp.quantity, pbp.id_provider_by_product FROM dispatch_by_warehouse dby INNER JOIN dispatch_details DD ON dby.id_dispatch_by_warehouse = dd.id_dispatch_by_warehouse
INNER JOIN provider_by_product PBP 
    ON DD.id_provider_by_product = pbp.id_provider_by_product
INNER JOIN PRODUCT P ON pbp.id_product = p.id_product;


--BITACORAS

--BRANCH
CREATE TABLE BITACORA_BRANCH (
    ID_USER      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_BRANCH       INTEGER NOT NULL,
    NAME_BRANCH     VARCHAR2(120) ,
    ADDRESS_BRANCH  VARCHAR2(220) ,
    PHONE_BRANCH    VARCHAR2(15),
    DATE_TIME    DATE NOT NULL
);


--INSERTING BRANCH
CREATE OR REPLACE PROCEDURE B_BRANCH_CREATE (PID_BRANCH IN BITACORA_BRANCH.ID_BRANCH%TYPE, PNAME_BRANCH IN BITACORA_BRANCH.NAME_BRANCH%TYPE,
PADDRESS_BRANCH IN BITACORA_BRANCH.ADDRESS_BRANCH%TYPE,PPHONE_BRANCH IN BITACORA_BRANCH.PHONE_BRANCH%TYPE) AS
BEGIN
  INSERT INTO BITACORA_BRANCH VALUES (USER,'INSERT',PID_BRANCH,PNAME_BRANCH,PADDRESS_BRANCH,PPHONE_BRANCH,SYSDATE);
END;

--DELETING BRANCH
CREATE OR REPLACE PROCEDURE B_BRANCH_DELETE (PID_BRANCH IN BITACORA_BRANCH.ID_BRANCH%TYPE, PNAME_BRANCH IN BITACORA_BRANCH.NAME_BRANCH%TYPE,
PADDRESS_BRANCH IN BITACORA_BRANCH.ADDRESS_BRANCH%TYPE,PPHONE_BRANCH IN BITACORA_BRANCH.PHONE_BRANCH%TYPE) AS
BEGIN
  INSERT INTO BITACORA_BRANCH VALUES (USER,'DELETE',PID_BRANCH,PNAME_BRANCH,PADDRESS_BRANCH,PPHONE_BRANCH,SYSDATE);
END;

--UPDATING BRANCH
CREATE OR REPLACE PROCEDURE B_BRANCH_UPDATE (PID_BRANCH IN BITACORA_BRANCH.ID_BRANCH%TYPE, PNAME_BRANCH IN BITACORA_BRANCH.NAME_BRANCH%TYPE,
PADDRESS_BRANCH IN BITACORA_BRANCH.ADDRESS_BRANCH%TYPE,PPHONE_BRANCH IN BITACORA_BRANCH.PHONE_BRANCH%TYPE) AS
BEGIN
  INSERT INTO BITACORA_BRANCH VALUES (USER,'UPDATING',PID_BRANCH,PNAME_BRANCH,PADDRESS_BRANCH,PPHONE_BRANCH,SYSDATE);
END;

CREATE OR REPLACE TRIGGER B_BRANCH AFTER INSERT OR UPDATE OR DELETE ON BRANCH FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_BRANCH_CREATE(:new.ID_BRANCH,:new.NAME_BRANCH,:new.ADDRESS_BRANCH,:new.PHONE_BRANCH);
    ELSIF DELETING  THEN
    B_BRANCH_DELETE(:old.ID_BRANCH,:old.NAME_BRANCH,:old.ADDRESS_BRANCH,:old.PHONE_BRANCH);
    ELSIF UPDATING THEN
    B_BRANCH_UPDATE(:old.ID_BRANCH,:old.NAME_BRANCH,:old.ADDRESS_BRANCH,:old.PHONE_BRANCH);
    END IF;
END;


--CATEGORY
CREATE TABLE BITACORA_CATEGORY (
    ID_USER      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_CATEGORY  INTEGER NOT NULL,
    NAME         VARCHAR2(50),
    DESCRIPTION  VARCHAR2(100),
    DATE_TIME    DATE NOT NULL
);

--INSERTING CATEGORY
CREATE OR REPLACE PROCEDURE B_CATEGORY_CREATE (PID_CATEGORY IN BITACORA_CATEGORY.ID_CATEGORY%TYPE, PNAME_CATEGORY IN BITACORA_CATEGORY.NAME%TYPE,
PDESCRIPTION_CATEGORY IN BITACORA_CATEGORY.DESCRIPTION%TYPE) AS
BEGIN
  INSERT INTO BITACORA_CATEGORY VALUES (USER,'INSERT',PID_CATEGORY,PNAME_CATEGORY,PDESCRIPTION_CATEGORY,SYSDATE);
END;

--DELETING CATEGORY
CREATE OR REPLACE PROCEDURE B_CATEGORY_DELETE (PID_CATEGORY IN BITACORA_CATEGORY.ID_CATEGORY%TYPE, PNAME_CATEGORY IN BITACORA_CATEGORY.NAME%TYPE,
PDESCRIPTION_CATEGORY IN BITACORA_CATEGORY.DESCRIPTION%TYPE) AS
BEGIN
  INSERT INTO BITACORA_CATEGORY VALUES (USER,'DELETE',PID_CATEGORY,PNAME_CATEGORY,PDESCRIPTION_CATEGORY,SYSDATE);
END;

--UPDATING CATEGORY
CREATE OR REPLACE PROCEDURE B_CATEGORY_UPDATE (PID_CATEGORY IN BITACORA_CATEGORY.ID_CATEGORY%TYPE, PNAME_CATEGORY IN BITACORA_CATEGORY.NAME%TYPE,
PDESCRIPTION_CATEGORY IN BITACORA_CATEGORY.DESCRIPTION%TYPE) AS
BEGIN
  INSERT INTO BITACORA_CATEGORY VALUES (USER,'UPDATE',PID_CATEGORY,PNAME_CATEGORY,PDESCRIPTION_CATEGORY,SYSDATE);
END;

CREATE OR REPLACE TRIGGER B_CATEGORY AFTER INSERT OR UPDATE OR DELETE ON CATEGORY FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_CATEGORY_CREATE(:new.ID_CATEGORY,:new.NAME,:new.DESCRIPTION);
    ELSIF DELETING  THEN
    B_CATEGORY_DELETE(:old.ID_CATEGORY, :old.NAME,:old.DESCRIPTION);
    ELSIF UPDATING THEN
    B_CATEGORY_UPDATE(:old.ID_CATEGORY, :old.NAME,:old.DESCRIPTION);
    END IF;
END;

--N_ORDER
CREATE TABLE BITACORA_N_ORDER (
    ID_USER      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_ORDER      INTEGER NOT NULL,
    DATE_TIME     DATE NOT NULL,
    TOTAL_AMOUNT  NUMBER(10, 2) NOT NULL,
    DATE_TIME_B    DATE NOT NULL
);

--INSERTING N_ORDER
CREATE OR REPLACE PROCEDURE B_N_ORDER_CREATE (PID_ORDER IN BITACORA_N_ORDER.ID_ORDER%TYPE, PDATE_TIME IN BITACORA_N_ORDER.DATE_TIME%TYPE,
PTOTAL_AMOUNT IN BITACORA_N_ORDER.TOTAL_AMOUNT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_N_ORDER VALUES (USER,'INSERT',PID_ORDER,PDATE_TIME,PTOTAL_AMOUNT,SYSDATE);
END;

--DELETING N_ORDER
CREATE OR REPLACE PROCEDURE B_N_ORDER_DELETE (PID_ORDER IN BITACORA_N_ORDER.ID_ORDER%TYPE, PDATE_TIME IN BITACORA_N_ORDER.DATE_TIME%TYPE,
PTOTAL_AMOUNT IN BITACORA_N_ORDER.TOTAL_AMOUNT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_N_ORDER VALUES (USER,'DELETE',PID_ORDER,PDATE_TIME,PTOTAL_AMOUNT,SYSDATE);
END;

--UPDATING N_ORDER
CREATE OR REPLACE PROCEDURE B_N_ORDER_UPDATE (PID_ORDER IN BITACORA_N_ORDER.ID_ORDER%TYPE, PDATE_TIME IN BITACORA_N_ORDER.DATE_TIME%TYPE,
PTOTAL_AMOUNT IN BITACORA_N_ORDER.TOTAL_AMOUNT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_N_ORDER VALUES (USER,'UPDATING',PID_ORDER,PDATE_TIME,PTOTAL_AMOUNT,SYSDATE);
END;

CREATE OR REPLACE TRIGGER B_N_ORDER AFTER INSERT OR UPDATE OR DELETE ON N_ORDER FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_N_ORDER_CREATE(:new.ID_ORDER,:new.DATE_TIME,:new.TOTAL_AMOUNT);
    ELSIF DELETING  THEN
    B_N_ORDER_DELETE(:old.ID_ORDER,:old.DATE_TIME,:old.TOTAL_AMOUNT);
    ELSIF UPDATING THEN
    B_N_ORDER_UPDATE(:old.ID_ORDER,:old.DATE_TIME,:old.TOTAL_AMOUNT);
    END IF;
END;

--PRODUCT 
CREATE TABLE BITACORA_PRODUCT (
    ID_USER      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_PRODUCT       INTEGER NOT NULL,
    NAME_PRODUCT     VARCHAR2(120) NOT NULL,
    CREATED_PRODUCT  DATE NOT NULL,
    ID_CATEGORY INTEGER NOT NULL,
    DATE_TIME   DATE NOT NULL
);

--INSERTING PRODUCT
CREATE OR REPLACE PROCEDURE B_PRODUCT_CREATE (PID_PRODUCT IN BITACORA_PRODUCT.ID_PRODUCT%TYPE , PNAME_PRODUCT IN BITACORA_PRODUCT.NAME_PRODUCT%TYPE,
PCREATED_PRODUCT IN BITACORA_PRODUCT.CREATED_PRODUCT%TYPE, PID_CATEGORY IN BITACORA_PRODUCT.ID_CATEGORY%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PRODUCT VALUES (USER,'INSERT',PID_PRODUCT,PNAME_PRODUCT,PCREATED_PRODUCT,PID_CATEGORY,SYSDATE);

END;

--DELETING PRODUCT
CREATE OR REPLACE PROCEDURE B_PRODUCT_DELETE (PID_PRODUCT IN BITACORA_PRODUCT.ID_PRODUCT%TYPE , PNAME_PRODUCT IN BITACORA_PRODUCT.NAME_PRODUCT%TYPE,
PCREATED_PRODUCT IN BITACORA_PRODUCT.CREATED_PRODUCT%TYPE, PID_CATEGORY IN BITACORA_PRODUCT.ID_CATEGORY%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PRODUCT VALUES (USER,'DELETE',PID_PRODUCT,PNAME_PRODUCT,PCREATED_PRODUCT,PID_CATEGORY,SYSDATE);
END;

--UPDATING PRODUCT
CREATE OR REPLACE PROCEDURE B_PRODUCT_UPDATE (PID_PRODUCT IN BITACORA_PRODUCT.ID_PRODUCT%TYPE , PNAME_PRODUCT IN BITACORA_PRODUCT.NAME_PRODUCT%TYPE,
PCREATED_PRODUCT IN BITACORA_PRODUCT.CREATED_PRODUCT%TYPE, PID_CATEGORY IN BITACORA_PRODUCT.ID_CATEGORY%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PRODUCT VALUES (USER,'UPDATE',PID_PRODUCT,PNAME_PRODUCT,PCREATED_PRODUCT,PID_CATEGORY,SYSDATE);
END;

CREATE OR REPLACE TRIGGER B_PRODUCT AFTER INSERT OR UPDATE OR DELETE ON PRODUCT FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_PRODUCT_CREATE(:new.ID_PRODUCT,:new.NAME_PRODUCT,:new.CREATED_PRODUCT,:new.ID_CATEGORY);
    ELSIF DELETING  THEN
    B_PRODUCT_DELETE(:old.ID_PRODUCT,:old.NAME_PRODUCT,:old.CREATED_PRODUCT,:old.ID_CATEGORY);
    ELSIF UPDATING THEN
    B_PRODUCT_UPDATE(:old.ID_PRODUCT,:old.NAME_PRODUCT,:old.CREATED_PRODUCT,:old.ID_CATEGORY);
    END IF;
END;

---PROVIDER
CREATE TABLE BITACORA_PROVIDER (
    ID_USER      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_PROVIDER       INTEGER NOT NULL,
    NAME_PROVIDER     VARCHAR2(250) NOT NULL,
    NIT_PROVIDER      VARCHAR2(15),
    PHONE_PROVIDER    VARCHAR2(15),
    ADDRESS_PROVIDER  VARCHAR2(220),
    DATE_TIME    DATE NOT NULL
);

--INSERTING PROVIDER
CREATE OR REPLACE PROCEDURE B_PROVIDER_CREATE (PID_PROVIDER IN BITACORA_PROVIDER.ID_PROVIDER%TYPE, PNAME_PROVIDER IN BITACORA_PROVIDER.NAME_PROVIDER%TYPE,
PNIT_PROVIDER IN BITACORA_PROVIDER.NIT_PROVIDER%TYPE, PPHONE_PROVIDER IN BITACORA_PROVIDER.PHONE_PROVIDER%TYPE, PADDRESS_PROVIDER IN BITACORA_PROVIDER.ADDRESS_PROVIDER%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PROVIDER VALUES (USER,'INSERT',PID_PROVIDER,PNAME_PROVIDER,PNIT_PROVIDER,PPHONE_PROVIDER,PADDRESS_PROVIDER,SYSDATE);
END;

--DELETING PROVIDER
CREATE OR REPLACE PROCEDURE B_PROVIDER_DELETE (PID_PROVIDER IN BITACORA_PROVIDER.ID_PROVIDER%TYPE, PNAME_PROVIDER IN BITACORA_PROVIDER.NAME_PROVIDER%TYPE,
PNIT_PROVIDER IN BITACORA_PROVIDER.NIT_PROVIDER%TYPE, PPHONE_PROVIDER IN BITACORA_PROVIDER.PHONE_PROVIDER%TYPE, PADDRESS_PROVIDER IN BITACORA_PROVIDER.ADDRESS_PROVIDER%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PROVIDER VALUES (USER,'DELETE',PID_PROVIDER,PNAME_PROVIDER,PNIT_PROVIDER,PPHONE_PROVIDER,PADDRESS_PROVIDER,SYSDATE);
END;

--UPDATING PROVIDER
CREATE OR REPLACE PROCEDURE B_PROVIDER_UPDATE (PID_PROVIDER IN BITACORA_PROVIDER.ID_PROVIDER%TYPE, PNAME_PROVIDER IN BITACORA_PROVIDER.NAME_PROVIDER%TYPE,
PNIT_PROVIDER IN BITACORA_PROVIDER.NIT_PROVIDER%TYPE, PPHONE_PROVIDER IN BITACORA_PROVIDER.PHONE_PROVIDER%TYPE, PADDRESS_PROVIDER IN BITACORA_PROVIDER.ADDRESS_PROVIDER%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PROVIDER VALUES (USER,'UPDATING',PID_PROVIDER,PNAME_PROVIDER,PNIT_PROVIDER,PPHONE_PROVIDER,PADDRESS_PROVIDER,SYSDATE);
END;

CREATE OR REPLACE TRIGGER B_PROVIDER AFTER INSERT OR UPDATE OR DELETE ON PROVIDER FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_PROVIDER_CREATE(:new.ID_PROVIDER,:new.NAME_PROVIDER,:new.NIT_PROVIDER,:new.PHONE_PROVIDER,:new.ADDRESS_PROVIDER);
    ELSIF DELETING  THEN
    B_PROVIDER_DELETE(:old.ID_PROVIDER,:old.NAME_PROVIDER,:old.NIT_PROVIDER,:old.PHONE_PROVIDER,:old.ADDRESS_PROVIDER);
    ELSIF UPDATING THEN
    B_PROVIDER_UPDATE(:old.ID_PROVIDER,:old.NAME_PROVIDER,:old.NIT_PROVIDER,:old.PHONE_PROVIDER,:old.ADDRESS_PROVIDER);
    END IF;
END;


--PROVIDER BY PRODUCT
CREATE TABLE BITACORA_PBP (
    ID_USER_B      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_PROVIDER_BY_PRODUCT  INTEGER NOT NULL,
    LAST_ADDED              DATE NOT NULL,
    ID_PROVIDER             INTEGER NOT NULL,
    ID_PRODUCT              INTEGER NOT NULL,
    ID_USER                 INTEGER NOT NULL,
    QUANTITY                INTEGER NOT NULL,
    PRICE_PRODUCT           FLOAT(10) NOT NULL,
    DATE_TIME    DATE NOT NULL
);

--INSERTING PBP
CREATE OR REPLACE PROCEDURE B_PBP_CREATE (
PID_PROVIDER_BY_PRODUCT IN BITACORA_PBP.ID_PROVIDER_BY_PRODUCT%TYPE,
PLAST_ADDED IN BITACORA_PBP.LAST_ADDED%TYPE,
PID_PROVIDER IN BITACORA_PBP.ID_PROVIDER%TYPE,
PID_PRODUCT IN BITACORA_PBP.ID_PRODUCT%TYPE,
PID_USER IN BITACORA_PBP.ID_USER%TYPE,
PQUANTITY IN BITACORA_PBP.QUANTITY%TYPE,
PPRICE_PRODUCT IN BITACORA_PBP.PRICE_PRODUCT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PBP VALUES (USER,'INSERT',PID_PROVIDER_BY_PRODUCT,PLAST_ADDED
  ,PID_PROVIDER,PID_PRODUCT,PID_USER,PQUANTITY,PPRICE_PRODUCT,SYSDATE);
END;

--DELETE PBP
CREATE OR REPLACE PROCEDURE B_PBP_DELETE (
PID_PROVIDER_BY_PRODUCT IN BITACORA_PBP.ID_PROVIDER_BY_PRODUCT%TYPE,
PLAST_ADDED IN BITACORA_PBP.LAST_ADDED%TYPE,
PID_PROVIDER IN BITACORA_PBP.ID_PROVIDER%TYPE,
PID_PRODUCT IN BITACORA_PBP.ID_PRODUCT%TYPE,
PID_USER IN BITACORA_PBP.ID_USER%TYPE,
PQUANTITY IN BITACORA_PBP.QUANTITY%TYPE,
PPRICE_PRODUCT IN BITACORA_PBP.PRICE_PRODUCT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PBP VALUES (USER,'DELETE',PID_PROVIDER_BY_PRODUCT,PLAST_ADDED
  ,PID_PROVIDER,PID_PRODUCT,PID_USER,PQUANTITY,PPRICE_PRODUCT,SYSDATE);
END;

--UPDATE PBP
CREATE OR REPLACE PROCEDURE B_PBP_UPDATE (
PID_PROVIDER_BY_PRODUCT IN BITACORA_PBP.ID_PROVIDER_BY_PRODUCT%TYPE,
PLAST_ADDED IN BITACORA_PBP.LAST_ADDED%TYPE,
PID_PROVIDER IN BITACORA_PBP.ID_PROVIDER%TYPE,
PID_PRODUCT IN BITACORA_PBP.ID_PRODUCT%TYPE,
PID_USER IN BITACORA_PBP.ID_USER%TYPE,
PQUANTITY IN BITACORA_PBP.QUANTITY%TYPE,
PPRICE_PRODUCT IN BITACORA_PBP.PRICE_PRODUCT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_PBP VALUES (USER,'UPDATE',PID_PROVIDER_BY_PRODUCT,PLAST_ADDED
  ,PID_PROVIDER,PID_PRODUCT,PID_USER,PQUANTITY,PPRICE_PRODUCT,SYSDATE);
END;

CREATE OR REPLACE TRIGGER B_PBP AFTER INSERT OR UPDATE OR DELETE ON PROVIDER_BY_PRODUCT FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_PBP_CREATE(:new.ID_PROVIDER_BY_PRODUCT, :new.LAST_ADDED, :new.ID_PROVIDER , :new.ID_PRODUCT, :new.ID_USER , :new.QUANTITY , :new.PRICE_PRODUCT);
    ELSIF DELETING  THEN
    B_PBP_DELETE(:old.ID_PROVIDER_BY_PRODUCT, :old.LAST_ADDED, :old.ID_PROVIDER , :old.ID_PRODUCT, :old.ID_USER , :old.QUANTITY , :old.PRICE_PRODUCT);
    ELSIF UPDATING THEN
    B_PBP_UPDATE(:old.ID_PROVIDER_BY_PRODUCT, :old.LAST_ADDED, :old.ID_PROVIDER , :old.ID_PRODUCT, :old.ID_USER , :old.QUANTITY , :old.PRICE_PRODUCT);
    END IF;
END;

----Order_Detail
CREATE TABLE BITACORA_ORDER_DETAIL (
    ID_USER      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_DETAIL               INTEGER NOT NULL,
    ID_PROVIDER_BY_PRODUCT  INTEGER NOT NULL,
    QUANTITY_IN              INTEGER NOT NULL,
    PRICE_BY_PRODUCT        NUMBER(10,2) NOT NULL,
    ID_ORDER                INTEGER NOT NULL,
    DATE_TIME    DATE NOT NULL
);

--INSERTING ORDER_DETAIL
CREATE OR REPLACE PROCEDURE B_ORDER_DETAIL_CREATE (PID_DETAIL IN BITACORA_ORDER_DETAIL.ID_DETAIL%TYPE,
PID_PROVIDER_BY_PRODUCT IN BITACORA_ORDER_DETAIL.ID_PROVIDER_BY_PRODUCT%TYPE,
PQUANTITY_IN IN BITACORA_ORDER_DETAIL.QUANTITY_IN%TYPE,
PPRICE_BY_PRODUCT IN BITACORA_ORDER_DETAIL.PRICE_BY_PRODUCT%TYPE,
PID_ORDER IN BITACORA_ORDER_DETAIL.ID_ORDER%TYPE) AS
BEGIN
  INSERT INTO BITACORA_ORDER_DETAIL VALUES (USER,'INSERT',PID_DETAIL,PID_PROVIDER_BY_PRODUCT,PQUANTITY_IN,PPRICE_BY_PRODUCT,PID_ORDER,SYSDATE);
END;

--DELETING ORDER_DETAIL
CREATE OR REPLACE PROCEDURE B_ORDER_DETAIL_DELETE (PID_DETAIL IN BITACORA_ORDER_DETAIL.ID_DETAIL%TYPE,
PID_PROVIDER_BY_PRODUCT IN BITACORA_ORDER_DETAIL.ID_PROVIDER_BY_PRODUCT%TYPE,
PQUANTITY_IN IN BITACORA_ORDER_DETAIL.QUANTITY_IN%TYPE,
PPRICE_BY_PRODUCT IN BITACORA_ORDER_DETAIL.PRICE_BY_PRODUCT%TYPE,
PID_ORDER IN BITACORA_ORDER_DETAIL.ID_ORDER%TYPE) AS
BEGIN
  INSERT INTO BITACORA_ORDER_DETAIL VALUES (USER,'DELETE',PID_DETAIL,PID_PROVIDER_BY_PRODUCT,PQUANTITY_IN,PPRICE_BY_PRODUCT,PID_ORDER,SYSDATE);
END;

--UPDATING ORDER_DETAIL
CREATE OR REPLACE PROCEDURE B_ORDER_DETAIL_UPDATE (PID_DETAIL IN BITACORA_ORDER_DETAIL.ID_DETAIL%TYPE,
PID_PROVIDER_BY_PRODUCT IN BITACORA_ORDER_DETAIL.ID_PROVIDER_BY_PRODUCT%TYPE,
PQUANTITY_IN IN BITACORA_ORDER_DETAIL.QUANTITY_IN%TYPE,
PPRICE_BY_PRODUCT IN BITACORA_ORDER_DETAIL.PRICE_BY_PRODUCT%TYPE,
PID_ORDER IN BITACORA_ORDER_DETAIL.ID_ORDER%TYPE) AS
BEGIN
  INSERT INTO BITACORA_ORDER_DETAIL VALUES (USER,'UPDATING',PID_DETAIL,PID_PROVIDER_BY_PRODUCT,PQUANTITY_IN,PPRICE_BY_PRODUCT,PID_ORDER,SYSDATE);
END;


CREATE OR REPLACE TRIGGER B_ORDER_DETAIL AFTER INSERT OR UPDATE OR DELETE ON ORDER_DETAIL FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_ORDER_DETAIL_CREATE(:new.ID_DETAIL,:new.ID_PROVIDER_BY_PRODUCT,:new.QUANTITY_IN,:new.PRICE_BY_PRODUCT,:new.ID_ORDER);
    ELSIF DELETING  THEN
    B_ORDER_DETAIL_DELETE(:old.ID_DETAIL,:old.ID_PROVIDER_BY_PRODUCT,:old.QUANTITY_IN,:old.PRICE_BY_PRODUCT,:old.ID_ORDER);
    ELSIF UPDATING THEN
    B_ORDER_DETAIL_UPDATE(:old.ID_DETAIL,:old.ID_PROVIDER_BY_PRODUCT,:old.QUANTITY_IN,:old.PRICE_BY_PRODUCT,:old.ID_ORDER);
    END IF;
END;


--DISPATCH_BY_WAREHOUSE
CREATE TABLE BITACORA_DBW (
    ID_USER_B      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_DISPATCH_BY_WAREHOUSE  INTEGER NOT NULL,
    ID_BRANCH                 INTEGER NOT NULL,
    ID_USER                   INTEGER NOT NULL,
    LAST_SENT                 DATE NOT NULL,
    DATE_TIME    DATE NOT NULL
);

--INSERTING DISPATCH_BY_WAREHOUSE
CREATE OR REPLACE PROCEDURE B_DBW_CREATE (PID_DISPATCH_BY_WAREHOUSE IN BITACORA_DBW.ID_DISPATCH_BY_WAREHOUSE%TYPE,
 PID_BRANCH IN BITACORA_DBW.ID_BRANCH%TYPE ,PID_USER IN BITACORA_DBW.ID_USER%TYPE , PLAST_SENT IN  BITACORA_DBW.LAST_SENT%TYPE ) AS
BEGIN
  INSERT INTO BITACORA_DBW VALUES (USER,'INSERT',PID_DISPATCH_BY_WAREHOUSE,PID_BRANCH,PID_USER,PLAST_SENT,SYSDATE);
END;

--DELETING DISPATCH_BY_WAREHOUSE
CREATE OR REPLACE PROCEDURE B_DBW_DELETE (PID_DISPATCH_BY_WAREHOUSE IN BITACORA_DBW.ID_DISPATCH_BY_WAREHOUSE%TYPE,
 PID_BRANCH IN BITACORA_DBW.ID_BRANCH%TYPE ,PID_USER IN BITACORA_DBW.ID_USER%TYPE , PLAST_SENT IN  BITACORA_DBW.LAST_SENT%TYPE ) AS
BEGIN
  INSERT INTO BITACORA_DBW VALUES (USER,'DELETE',PID_DISPATCH_BY_WAREHOUSE,PID_BRANCH,PID_USER,PLAST_SENT,SYSDATE);
END;

--UPDATING DISPATCH_BY_WAREHOUSE
CREATE OR REPLACE PROCEDURE B_DBW_UPDATE (PID_DISPATCH_BY_WAREHOUSE IN BITACORA_DBW.ID_DISPATCH_BY_WAREHOUSE%TYPE,
 PID_BRANCH IN BITACORA_DBW.ID_BRANCH%TYPE ,PID_USER IN BITACORA_DBW.ID_USER%TYPE , PLAST_SENT IN  BITACORA_DBW.LAST_SENT%TYPE ) AS
BEGIN
  INSERT INTO BITACORA_DBW VALUES (USER,'UPDATE',PID_DISPATCH_BY_WAREHOUSE,PID_BRANCH,PID_USER,PLAST_SENT,SYSDATE);
END;

CREATE OR REPLACE TRIGGER B_DBW AFTER INSERT OR UPDATE OR DELETE ON DISPATCH_BY_WAREHOUSE FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_DBW_CREATE(:new.ID_DISPATCH_BY_WAREHOUSE , :new.ID_BRANCH, :new.ID_USER , :new.LAST_SENT );
    ELSIF DELETING  THEN
    B_DBW_DELETE(:old.ID_DISPATCH_BY_WAREHOUSE , :old.ID_BRANCH, :old.ID_USER , :old.LAST_SENT );
    ELSIF UPDATING THEN
    B_DBW_UPDATE(:old.ID_DISPATCH_BY_WAREHOUSE , :old.ID_BRANCH, :old.ID_USER , :old.LAST_SENT );
    END IF;
END;


----DISPATCH_DETAILS
CREATE TABLE BITACORA_DISPATCH_DETAILS (
    ID_USER      VARCHAR2(120) NOT NULL,
    TRANSACTION  VARCHAR2(120) NOT NULL,
    ID_DISPATCH               INTEGER NOT NULL,
    ID_DISPATCH_BY_WAREHOUSE  INTEGER NOT NULL,
    QUANTITY_OUT              INTEGER NOT NULL,
    ID_PROVIDER_BY_PRODUCT    INTEGER NOT NULL,
    DATE_TIME    DATE NOT NULL
);

--INSERTING DISPATCH_DETAILS
CREATE OR REPLACE PROCEDURE B_DISPATCH_DETAILS_CREATE (PID_DISPATCH IN BITACORA_DISPATCH_DETAILS.ID_DISPATCH%TYPE, PID_DISPATCH_BY_WAREHOUSE IN BITACORA_DISPATCH_DETAILS.ID_DISPATCH_BY_WAREHOUSE%TYPE,
PQUANTITY_OUT IN BITACORA_DISPATCH_DETAILS.QUANTITY_OUT%TYPE, PID_PROVIDER_BY_PRODUCT IN BITACORA_DISPATCH_DETAILS.ID_PROVIDER_BY_PRODUCT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_DISPATCH_DETAILS VALUES (USER,'INSERT',PID_DISPATCH,PID_DISPATCH_BY_WAREHOUSE,PQUANTITY_OUT,PID_PROVIDER_BY_PRODUCT,SYSDATE);
END;

--DELETING DISPATCH_DETAILS
CREATE OR REPLACE PROCEDURE B_DISPATCH_DETAILS_DELETE (PID_DISPATCH IN BITACORA_DISPATCH_DETAILS.ID_DISPATCH%TYPE, PID_DISPATCH_BY_WAREHOUSE IN BITACORA_DISPATCH_DETAILS.ID_DISPATCH_BY_WAREHOUSE%TYPE,
PQUANTITY_OUT IN BITACORA_DISPATCH_DETAILS.QUANTITY_OUT%TYPE, PID_PROVIDER_BY_PRODUCT IN BITACORA_DISPATCH_DETAILS.ID_PROVIDER_BY_PRODUCT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_DISPATCH_DETAILS VALUES (USER,'DELETE',PID_DISPATCH,PID_DISPATCH_BY_WAREHOUSE,PQUANTITY_OUT,PID_PROVIDER_BY_PRODUCT,SYSDATE);
END;

--UPDATING DISPATCH_DETAILS
CREATE OR REPLACE PROCEDURE B_DISPATCH_DETAILS_UPDATE (PID_DISPATCH IN BITACORA_DISPATCH_DETAILS.ID_DISPATCH%TYPE, PID_DISPATCH_BY_WAREHOUSE IN BITACORA_DISPATCH_DETAILS.ID_DISPATCH_BY_WAREHOUSE%TYPE,
PQUANTITY_OUT IN BITACORA_DISPATCH_DETAILS.QUANTITY_OUT%TYPE, PID_PROVIDER_BY_PRODUCT IN BITACORA_DISPATCH_DETAILS.ID_PROVIDER_BY_PRODUCT%TYPE) AS
BEGIN
  INSERT INTO BITACORA_DISPATCH_DETAILS VALUES (USER,'UPDATING',PID_DISPATCH,PID_DISPATCH_BY_WAREHOUSE,PQUANTITY_OUT,PID_PROVIDER_BY_PRODUCT,SYSDATE);
END;

CREATE OR REPLACE TRIGGER B_DISPATCH_DETAILS AFTER INSERT OR UPDATE OR DELETE ON DISPATCH_DETAILS FOR EACH ROW
BEGIN
    IF INSERTING THEN
    B_DISPATCH_DETAILS_CREATE(:new.ID_DISPATCH,:new.ID_DISPATCH_BY_WAREHOUSE,:new.QUANTITY_OUT,:new.ID_PROVIDER_BY_PRODUCT);
    ELSIF DELETING  THEN
    B_DISPATCH_DETAILS_DELETE(:old.ID_DISPATCH,:old.ID_DISPATCH_BY_WAREHOUSE,:old.QUANTITY_OUT,:old.ID_PROVIDER_BY_PRODUCT);
    ELSIF UPDATING THEN
    B_DISPATCH_DETAILS_UPDATE(:old.ID_DISPATCH,:old.ID_DISPATCH_BY_WAREHOUSE,:old.QUANTITY_OUT,:old.ID_PROVIDER_BY_PRODUCT);
    END IF;
END;


--ETL
CREATE USER WAREHOUSE_REPORTS IDENTIFIED BY ROOT

CREATE DATABASE LINK WAREHOUSE_LINK CONNECT TO WAREHOUSE IDENTIFIED BY ROOT USING
'(DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = xe)
    )
)';


CREATE OR REPLACE PROCEDURE SP_ETL (SQL_TABLE_NAME IN VARCHAR2, QUERY_NAME IN VARCHAR2) IS
   ddl_script VARCHAR2(1000);
   exist INTEGER;
BEGIN

    SELECT COUNT(*) INTO exist FROM SYS.ALL_TABLES WHERE TABLE_NAME=SQL_TABLE_NAME; 
    
    IF (exist)=1 THEN 
        ddl_script := 'DROP TABLE IF EXISTS '|| SQL_TABLE_NAME;
        EXECUTE IMMEDIATE ddl_script;
    END IF;
    ddl_script := ' CREATE TABLE '|| SQL_TABLE_NAME || ' AS ' || QUERY_NAME;
        
    EXECUTE IMMEDIATE ddl_script;
    EXCEPTION 
  WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('DDL FALLO '||SQL_TABLE_NAME||':: ERROR::'||SQLERRM);
END;
/